<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/9 20:41:27" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\Shortcut\Shortcut.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="564" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\FileInformation.ueprj" CustomTermPath="" PreviewPath="D:\workspace_github\nw.js\nw.js\Shortcut\ShortcutPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl># Shortcut {: </sl><tl /><tsl /><prv /><sfl># Shortcut {: .doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>.doctitle}</sl><tl /><tsl /><prv /><sfl># Shortcut {: .doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>---</sl><tl /><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[TOC]</sl><tl /><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`Shortcut` represents a global keyboard shortcut, also known as system-wide hotkey. </sl><tl /><tsl /><prv /><sfl>`Shortcut` represents a global keyboard shortcut, also known as system-wide hotkey. If registered successfully, it works even if your app does *not* have focus.</sfl></tu><tu PI="4" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If registered successfully, it works even if your app does *not* have focus.</sl><tl /><tsl /><prv /><sfl>`Shortcut` represents a global keyboard shortcut, also known as system-wide hotkey. If registered successfully, it works even if your app does *not* have focus.</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`Shortcut` inherited from [`EventEmitter`](https://nodejs.org/api/events.html#events_class_events_eventemitter). </sl><tl /><tsl /><prv /><sfl>`Shortcut` inherited from [`EventEmitter`](https://nodejs.org/api/events.html#events_class_events_eventemitter). Every time the user presses the registered shortcut, your app will receive an `active` event of the shortcut object.</sfl></tu><tu PI="5" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Every time the user presses the registered shortcut, your app will receive an `active` event of the shortcut object.</sl><tl /><tsl /><prv /><sfl>`Shortcut` inherited from [`EventEmitter`](https://nodejs.org/api/events.html#events_class_events_eventemitter). Every time the user presses the registered shortcut, your app will receive an `active` event of the shortcut object.</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Synopsis</sl><tl /><tsl /><prv /><sfl>## Synopsis</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```js</sl><tl /><tsl /><prv /><sfl>```js</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var option = {</sl><tl /><tsl /><prv /><sfl>var option = {</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  key : </sl><tl /><tsl /><prv /><sfl>  key : "Ctrl+Shift+A",</sfl></tu><tu PI="9" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"Ctrl+Shift+A",</sl><tl /><tsl /><prv /><sfl>  key : "Ctrl+Shift+A",</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  active : </sl><tl /><tsl /><prv /><sfl>  active : function() {</sfl></tu><tu PI="10" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>function() {</sl><tl /><tsl /><prv /><sfl>  active : function() {</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    console.log("Global desktop keyboard shortcut: </sl><tl /><tsl /><prv /><sfl>    console.log("Global desktop keyboard shortcut: " + this.key + " active."); </sfl></tu><tu PI="11" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>" + this.key + " active."); </sl><tl /><tsl /><prv /><sfl>    console.log("Global desktop keyboard shortcut: " + this.key + " active."); </sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  },</sl><tl /><tsl /><prv /><sfl>  },</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  failed : </sl><tl /><tsl /><prv /><sfl>  failed : function(msg) {</sfl></tu><tu PI="13" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>function(msg) {</sl><tl /><tsl /><prv /><sfl>  failed : function(msg) {</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    // :(, fail to register the |key| or couldn't parse the |key|.</sl><tl /><tsl /><prv /><sfl>    // :(, fail to register the |key| or couldn't parse the |key|.</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    console.log(msg);</sl><tl /><tsl /><prv /><sfl>    console.log(msg);</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  }</sl><tl /><tsl /><prv /><sfl>  }</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>};</sl><tl /><tsl /><prv /><sfl>};</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Create a shortcut with |option|.</sl><tl /><tsl /><prv /><sfl>// Create a shortcut with |option|.</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var shortcut = new nw.Shortcut(option);</sl><tl /><tsl /><prv /><sfl>var shortcut = new nw.Shortcut(option);</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Register global desktop shortcut, which can work without focus.</sl><tl /><tsl /><prv /><sfl>// Register global desktop shortcut, which can work without focus.</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.App.registerGlobalHotKey(shortcut);</sl><tl /><tsl /><prv /><sfl>nw.App.registerGlobalHotKey(shortcut);</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// If register |shortcut| successfully and user struck "Ctrl+Shift+A", |shortcut|</sl><tl /><tsl /><prv /><sfl>// If register |shortcut| successfully and user struck "Ctrl+Shift+A", |shortcut|</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// will get an "active" event.</sl><tl /><tsl /><prv /><sfl>// will get an "active" event.</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// You can also add listener to shortcut's active and failed event.</sl><tl /><tsl /><prv /><sfl>// You can also add listener to shortcut's active and failed event.</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>shortcut.on('active', function() {</sl><tl /><tsl /><prv /><sfl>shortcut.on('active', function() {</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  console.log("Global desktop keyboard shortcut: </sl><tl /><tsl /><prv /><sfl>  console.log("Global desktop keyboard shortcut: " + this.key + " active."); </sfl></tu><tu PI="26" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>" + this.key + " active."); </sl><tl /><tsl /><prv /><sfl>  console.log("Global desktop keyboard shortcut: " + this.key + " active."); </sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>shortcut.on('failed', function(msg) {</sl><tl /><tsl /><prv /><sfl>shortcut.on('failed', function(msg) {</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  console.log(msg);</sl><tl /><tsl /><prv /><sfl>  console.log(msg);</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Unregister the global desktop shortcut.</sl><tl /><tsl /><prv /><sfl>// Unregister the global desktop shortcut.</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.App.unregisterGlobalHotKey(shortcut);</sl><tl /><tsl /><prv /><sfl>nw.App.unregisterGlobalHotKey(shortcut);</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## new Shortcut(option)</sl><tl /><tsl /><prv /><sfl>## new Shortcut(option)</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `option` `{Object}`</sl><tl /><tsl /><prv /><sfl>* `option` `{Object}`</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `key` `{String}` key combinations of the shortcut, such as `"ctrl+shift+a"`. </sl><tl /><tsl /><prv /><sfl>    - `key` `{String}` key combinations of the shortcut, such as `"ctrl+shift+a"`. See [shortcut.key](#shortcutkey) property for details.</sfl></tu><tu PI="36" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [shortcut.key](#shortcutkey) property for details.</sl><tl /><tsl /><prv /><sfl>    - `key` `{String}` key combinations of the shortcut, such as `"ctrl+shift+a"`. See [shortcut.key](#shortcutkey) property for details.</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `active` `{Function}` _Optional_ a callback when the hotkey is triggered. </sl><tl /><tsl /><prv /><sfl>    - `active` `{Function}` _Optional_ a callback when the hotkey is triggered. See [shortcut.active](#shortcutactive) property for details.</sfl></tu><tu PI="37" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [shortcut.active](#shortcutactive) property for details.</sl><tl /><tsl /><prv /><sfl>    - `active` `{Function}` _Optional_ a callback when the hotkey is triggered. See [shortcut.active](#shortcutactive) property for details.</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `failed` `{Function}` _Optional_ a callback when failed to register the hotkey. </sl><tl /><tsl /><prv /><sfl>    - `failed` `{Function}` _Optional_ a callback when failed to register the hotkey. See [shortcut.failed](#shortcutfailed) property for details.</sfl></tu><tu PI="38" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [shortcut.failed](#shortcutfailed) property for details.</sl><tl /><tsl /><prv /><sfl>    - `failed` `{Function}` _Optional_ a callback when failed to register the hotkey. See [shortcut.failed](#shortcutfailed) property for details.</sfl></tu><tu PI="39" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Create new `Shortcut`, `option` is an object contains initial settings for the `Shortcut`.</sl><tl /><tsl /><prv /><sfl>Create new `Shortcut`, `option` is an object contains initial settings for the `Shortcut`.</sfl></tu><tu PI="40" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## shortcut.key</sl><tl /><tsl /><prv /><sfl>## shortcut.key</sfl></tu><tu PI="41" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get the `key` of a `Shortcut`. </sl><tl /><tsl /><prv /><sfl>Get the `key` of a `Shortcut`. It is a string to specify the shortcut key, like `"Ctrl+Alt+A"`. The key is consisted of zero or more _modifiers_ and a _key_ on your keyboard. Only one key code is supported. Key code is case insensitive.</sfl></tu><tu PI="41" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It is a string to specify the shortcut key, like `"Ctrl+Alt+A"`. </sl><tl /><tsl /><prv /><sfl>Get the `key` of a `Shortcut`. It is a string to specify the shortcut key, like `"Ctrl+Alt+A"`. The key is consisted of zero or more _modifiers_ and a _key_ on your keyboard. Only one key code is supported. Key code is case insensitive.</sfl></tu><tu PI="41" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The key is consisted of zero or more _modifiers_ and a _key_ on your keyboard. </sl><tl /><tsl /><prv /><sfl>Get the `key` of a `Shortcut`. It is a string to specify the shortcut key, like `"Ctrl+Alt+A"`. The key is consisted of zero or more _modifiers_ and a _key_ on your keyboard. Only one key code is supported. Key code is case insensitive.</sfl></tu><tu PI="41" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Only one key code is supported. </sl><tl /><tsl /><prv /><sfl>Get the `key` of a `Shortcut`. It is a string to specify the shortcut key, like `"Ctrl+Alt+A"`. The key is consisted of zero or more _modifiers_ and a _key_ on your keyboard. Only one key code is supported. Key code is case insensitive.</sfl></tu><tu PI="41" MatchPercent="" Bindex="5" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Key code is case insensitive.</sl><tl /><tsl /><prv /><sfl>Get the `key` of a `Shortcut`. It is a string to specify the shortcut key, like `"Ctrl+Alt+A"`. The key is consisted of zero or more _modifiers_ and a _key_ on your keyboard. Only one key code is supported. Key code is case insensitive.</sfl></tu><tu PI="42" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>List of supported modifiers:</sl><tl /><tsl /><prv /><sfl>List of supported modifiers:</sfl></tu><tu PI="43" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Ctrl`</sl><tl /><tsl /><prv /><sfl>* `Ctrl`</sfl></tu><tu PI="44" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Alt`</sl><tl /><tsl /><prv /><sfl>* `Alt`</sfl></tu><tu PI="45" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Shift`</sl><tl /><tsl /><prv /><sfl>* `Shift`</sfl></tu><tu PI="46" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Command`: </sl><tl /><tsl /><prv /><sfl>* `Command`: `Command` modifier maps to Apple key (&lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;) on Mac, and maps to the Windows key on Windows and Linux.</sfl></tu><tu PI="46" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`Command` modifier maps to Apple key (&lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;) on Mac, and maps to the Windows key on Windows and Linux.</sl><tl /><tsl /><prv /><sfl>* `Command`: `Command` modifier maps to Apple key (&lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;) on Mac, and maps to the Windows key on Windows and Linux.</sfl></tu><tu PI="47" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>List of supported keys:</sl><tl /><tsl /><prv /><sfl>List of supported keys:</sfl></tu><tu PI="48" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Alphabet: </sl><tl /><tsl /><prv /><sfl>* Alphabet: `A`-`Z`</sfl></tu><tu PI="48" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`A`-`Z`</sl><tl /><tsl /><prv /><sfl>* Alphabet: `A`-`Z`</sfl></tu><tu PI="49" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Digits: </sl><tl /><tsl /><prv /><sfl>* Digits: `0`-`9`</sfl></tu><tu PI="49" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`0`-`9`</sl><tl /><tsl /><prv /><sfl>* Digits: `0`-`9`</sfl></tu><tu PI="50" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Function Keys: </sl><tl /><tsl /><prv /><sfl>* Function Keys: `F1`-`F24`</sfl></tu><tu PI="50" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`F1`-`F24`</sl><tl /><tsl /><prv /><sfl>* Function Keys: `F1`-`F24`</sfl></tu><tu PI="51" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Comma`</sl><tl /><tsl /><prv /><sfl>* `Comma`</sfl></tu><tu PI="52" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Period`</sl><tl /><tsl /><prv /><sfl>* `Period`</sfl></tu><tu PI="53" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Tab`</sl><tl /><tsl /><prv /><sfl>* `Tab`</sfl></tu><tu PI="54" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Home` / `End` / `PageUp` / `PageDown` / `Insert` / `Delete`</sl><tl /><tsl /><prv /><sfl>* `Home` / `End` / `PageUp` / `PageDown` / `Insert` / `Delete`</sfl></tu><tu PI="55" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Up` / `Down` / `Left` / `Right`</sl><tl /><tsl /><prv /><sfl>* `Up` / `Down` / `Left` / `Right`</sfl></tu><tu PI="56" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `MediaNextTrack` / `MediaPlayPause` / `MediaPrevTrack` / `MediaStop`</sl><tl /><tsl /><prv /><sfl>* `MediaNextTrack` / `MediaPlayPause` / `MediaPrevTrack` / `MediaStop`</sfl></tu><tu PI="57" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Comma` or `,`</sl><tl /><tsl /><prv /><sfl>* `Comma` or `,`</sfl></tu><tu PI="58" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Period` or `.`</sl><tl /><tsl /><prv /><sfl>* `Period` or `.`</sfl></tu><tu PI="59" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Tab` or `\t`</sl><tl /><tsl /><prv /><sfl>* `Tab` or `\t`</sfl></tu><tu PI="60" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Backquote` or `` ` ``</sl><tl /><tsl /><prv /><sfl>* `Backquote` or `` ` ``</sfl></tu><tu PI="61" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Enter` or `\n`</sl><tl /><tsl /><prv /><sfl>* `Enter` or `\n`</sfl></tu><tu PI="62" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Minus` or `-`</sl><tl /><tsl /><prv /><sfl>* `Minus` or `-`</sfl></tu><tu PI="63" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Equal` or `=`</sl><tl /><tsl /><prv /><sfl>* `Equal` or `=`</sfl></tu><tu PI="64" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Backslash` or `\`</sl><tl /><tsl /><prv /><sfl>* `Backslash` or `\`</sfl></tu><tu PI="65" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Semicolon` or `;`</sl><tl /><tsl /><prv /><sfl>* `Semicolon` or `;`</sfl></tu><tu PI="66" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Quote` or `'`</sl><tl /><tsl /><prv /><sfl>* `Quote` or `'`</sfl></tu><tu PI="67" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `BracketLeft` or `[`</sl><tl /><tsl /><prv /><sfl>* `BracketLeft` or `[`</sfl></tu><tu PI="68" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `BracketRight` or `[`</sl><tl /><tsl /><prv /><sfl>* `BracketRight` or `[`</sfl></tu><tu PI="69" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Escape`</sl><tl /><tsl /><prv /><sfl>* `Escape`</sfl></tu><tu PI="70" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* [DOM Level 3 W3C KeyboardEvent Code Values](http://www.w3.org/TR/DOM-Level-3-Events-code/)</sl><tl /><tsl /><prv /><sfl>* [DOM Level 3 W3C KeyboardEvent Code Values](http://www.w3.org/TR/DOM-Level-3-Events-code/)</sfl></tu><tu PI="71" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Single Key without Modifiers"</sfl></tu><tu PI="71" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Single Key without Modifiers"</sl><tl /><tsl /><prv /><sfl>!!! warning "Single Key without Modifiers"</sfl></tu><tu PI="72" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    The API `App.registerGlobalHotKey()` can support applications intercepting a single key (like `{ key: </sl><tl /><tsl /><prv /><sfl>    The API `App.registerGlobalHotKey()` can support applications intercepting a single key (like `{ key: "A"}`). But users will not be able to use "A" normally any more until the app unregisters it. However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.</sfl></tu><tu PI="72" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"A"}`). </sl><tl /><tsl /><prv /><sfl>    The API `App.registerGlobalHotKey()` can support applications intercepting a single key (like `{ key: "A"}`). But users will not be able to use "A" normally any more until the app unregisters it. However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.</sfl></tu><tu PI="72" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>But users will not be able to use "A" normally any more until the app unregisters it. </sl><tl /><tsl /><prv /><sfl>    The API `App.registerGlobalHotKey()` can support applications intercepting a single key (like `{ key: "A"}`). But users will not be able to use "A" normally any more until the app unregisters it. However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.</sfl></tu><tu PI="72" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.</sl><tl /><tsl /><prv /><sfl>    The API `App.registerGlobalHotKey()` can support applications intercepting a single key (like `{ key: "A"}`). But users will not be able to use "A" normally any more until the app unregisters it. However, the API doesn't limit this usage, and it would be useful if the applications wants to listen Media Keys.</sfl></tu><tu PI="73" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    **Only use zero modifier when you are knowing what your are doing.**</sl><tl /><tsl /><prv /><sfl>    **Only use zero modifier when you are knowing what your are doing.**</sfl></tu><tu PI="74" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## shortcut.active</sl><tl /><tsl /><prv /><sfl>## shortcut.active</sfl></tu><tu PI="75" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get or set the `active` callback of a `Shortcut`. </sl><tl /><tsl /><prv /><sfl>Get or set the `active` callback of a `Shortcut`. It will be called when user presses the shortcut.</sfl></tu><tu PI="75" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It will be called when user presses the shortcut.</sl><tl /><tsl /><prv /><sfl>Get or set the `active` callback of a `Shortcut`. It will be called when user presses the shortcut.</sfl></tu><tu PI="76" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## shortcut.failed</sl><tl /><tsl /><prv /><sfl>## shortcut.failed</sfl></tu><tu PI="77" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>*Get or set the `failed` callback of a `Shortcut`. </sl><tl /><tsl /><prv /><sfl>*Get or set the `failed` callback of a `Shortcut`. It will be called when application passes an invalid key , or failed to register the key.</sfl></tu><tu PI="77" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It will be called when application passes an invalid key , or failed to register the key.</sl><tl /><tsl /><prv /><sfl>*Get or set the `failed` callback of a `Shortcut`. It will be called when application passes an invalid key , or failed to register the key.</sfl></tu><tu PI="78" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event:active</sl><tl /><tsl /><prv /><sfl>## Event:active</sfl></tu><tu PI="79" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Same as [`shortcut.active`](#shortcutactive)</sl><tl /><tsl /><prv /><sfl>Same as [`shortcut.active`](#shortcutactive)</sfl></tu><tu PI="80" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event:failed</sl><tl /><tsl /><prv /><sfl>## Event:failed</sfl></tu><tu PI="81" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Same as [`shortcut.failed`](#shortcutfailed)</sl><tl /><tsl /><prv /><sfl>Same as [`shortcut.failed`](#shortcutfailed)</sfl></tu></body></Transmate>