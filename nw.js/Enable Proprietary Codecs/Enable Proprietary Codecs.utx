<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/11 0:00:18" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\Enable Proprietary Codecs\Enable Proprietary Codecs.txt" RowIndex="49" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="325" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\记忆库\nw.js记忆库\nw.js记忆库.uetm" CustomTermPath="D:\workspace_github\nw.js\nw.js\术语库\nw.js术语库\nw.js术语库.uetb|D:\workspace_github\nw.js\nw.js\术语库\不转换英文标点\不转换英文标点.uetb|" PreviewPath="D:\workspace_github\nw.js\nw.js\Enable Proprietary Codecs\Enable Proprietary CodecsPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="False"><sl># Enable Proprietary Codecs</sl><tl># Enable Proprietary Codecs</tl><tsl /><prv /><sfl># Enable Proprietary Codecs</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>---</sl><tl>---</tl><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;100%&quot;,&quot;SourceWord&quot;:&quot;[目录]&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>[TOC]</sl><tl>[目录]</tl><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;术语不一致(##|##)&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;# #支持的编解码器在预制nw.js二进制&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>## Supported Codecs in Prebuilt NW.js Binary</sl><tl>## 在预制NW.js二进制文件支持的编解码器</tl><tsl /><prv /><sfl>## Supported Codecs in Prebuilt NW.js Binary</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;作为nw.js基于铬、媒体组成基本上是相同的。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>As NW.js is based on Chromium, the media components are essentially the same.</sl><tl>作为基于Chromium的NW.js，媒体组件基本上是相同的。</tl><tsl /><prv /><sfl>As NW.js is based on Chromium, the media components are essentially the same.</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;在预先建立的nw.js，以下的编解码器支持：&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>In the pre-built NW.js, following codecs are supported:</sl><tl>在预编译的nw.js中，以下的编解码器被支持：</tl><tsl /><prv /><sfl>In the pre-built NW.js, following codecs are supported:</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;没有人&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>```none</sl><tl>```none</tl><tsl /><prv /><sfl>```none</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;Theora，Vorbis，VP8，pcm_u8，pcm_s16le，pcm_s24le，pcm_f32le，pcm_s16be，pcm_s24be&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>theora,vorbis,vp8,pcm_u8,pcm_s16le,pcm_s24le,pcm_f32le,pcm_s16be,pcm_s24be</sl><tl>Theora，Vorbis，VP8，pcm_u8，pcm_s16le，pcm_s24le，pcm_f32le，pcm_s16be，pcm_s24be</tl><tsl /><prv /><sfl>theora,vorbis,vp8,pcm_u8,pcm_s16le,pcm_s24le,pcm_f32le,pcm_s16be,pcm_s24be</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>```</sl><tl>```</tl><tsl /><prv /><sfl>```</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;和分配器的支持：&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>and following demuxers are supported:</sl><tl>以下demuxers 被支持：</tl><tsl /><prv /><sfl>and following demuxers are supported:</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;没有人&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>```none</sl><tl>```none</tl><tsl /><prv /><sfl>```none</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;Matroska，ogg，wav&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>ogg,matroska,wav</sl><tl>Matroska，ogg，wav</tl><tsl /><prv /><sfl>ogg,matroska,wav</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>```</sl><tl>```</tl><tsl /><prv /><sfl>```</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;# #使专有的编解码器在nw.js&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>## Enable Proprietary Codecs in NW.js</sl><tl>##在nw.js使用专有的编解码器</tl><tsl /><prv /><sfl>## Enable Proprietary Codecs in NW.js</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>!!! </sl><tl>!!! </tl><tsl /><prv /><sfl>!!! warning "License and Patent Fee"</sfl></tu><tu PI="15" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;警告“许可证和专利费”&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>warning "License and Patent Fee"</sl><tl>警告“许可证和专利费”</tl><tsl /><prv /><sfl>!!! warning "License and Patent Fee"</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;MP3和H.264编解码器中使用的许可` nw.js ffmpeg ` GPL下。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>    MP3 and H.264 codecs are licensed under the GPL in `ffmpeg` used by NW.js. </sl><tl>基于GPL许可证的的MP3和H.264编解码器已经被授权给NW.js使用。</tl><tsl /><prv /><sfl>    MP3 and H.264 codecs are licensed under the GPL in `ffmpeg` used by NW.js. Make sure your app are released with compatible license of GPL. And you also have to pay patent licensing royalties for using them. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.</sfl></tu><tu PI="16" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;确保你的应用程序的发布与GPL兼容的许可证。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>Make sure your app are released with compatible license of GPL. </sl><tl>请确保你的应用程序的发布兼容GPL的许可证。</tl><tsl /><prv /><sfl>    MP3 and H.264 codecs are licensed under the GPL in `ffmpeg` used by NW.js. Make sure your app are released with compatible license of GPL. And you also have to pay patent licensing royalties for using them. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.</sfl></tu><tu PI="16" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;你还必须支付专利许可使用费。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>And you also have to pay patent licensing royalties for using them. </sl><tl>而且你还必须支付专利许可使用费。</tl><tsl /><prv /><sfl>    MP3 and H.264 codecs are licensed under the GPL in `ffmpeg` used by NW.js. Make sure your app are released with compatible license of GPL. And you also have to pay patent licensing royalties for using them. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.</sfl></tu><tu PI="16" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;如果你不明白你的申请中的许可限制和使用专利的媒体格式，请咨询律师。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.</sl><tl>如果你不明白许可限制和使用专利的媒体格式，请咨询律师。</tl><tsl /><prv /><sfl>    MP3 and H.264 codecs are licensed under the GPL in `ffmpeg` used by NW.js. Make sure your app are released with compatible license of GPL. And you also have to pay patent licensing royalties for using them. Consult a lawyer if you do not understand the licensing constraints and using patented media formats in your application.</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;在最近的版本的Chromium项目，ffmpeg DLL改为内置。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. </sl><tl>在最近的版本的Chromium项目中，ffmpeg DLL已经改为内置。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;我们没有许可证的重新分配的编解码器的问题。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>And we don't have license to redistribute the codec in question. </sl><tl>问题是我们没有重新分配的编解码器的许可证。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;因此，开发人员没有任何方法来得到编解码器没有编译。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>So developers don't have any ways to get the codec without compiling. </sl><tl>因此，开发人员除了编译没有任何方法来得到编解码器。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;为了使事情更容易，我们建立了FFmpeg作为一个单独的DLL。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>To make things easier, we build ffmpeg as a separate Dll. </sl><tl>为了使事情更容易，我们将FFmpeg编译为一个单独的DLL。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="5" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;我们分发DLL将不包含任何专有的编解码器的问题。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>The Dll we distribute will not contain any proprietary codecs in question. </sl><tl>我们分发DLL将不存在专有编解码器的问题。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="6" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;术语不一致(nw|NW,nw|nw)&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;开发者可以重新编译DLL本身，这是更容易比编译NW。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>Developers can recompile the Dll for themselves, which is much easier than compiling NW. </sl><tl>开发者可以自己重新编译DLL，这将比编译NW更容易。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="7" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;或者他们可以从别人[社区]得到的DLL（https：／／GitHub。COM \/ nwjs \/净重。js \/问题\/ 4492）。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). </sl><tl>获取从别处获取 [通过团体获取](https://github.com/nwjs/nw.js/issues/4492). 
</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="8" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;有标点符号(内,可)不正确&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;值得注意的是，开发人员可以将包含专有的编解码器，只要他们有执照的二进制文件。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. </sl><tl>值得注意的是，开发人员在他所拥有的许可时间内,可以任意分发包含专有的编解码器的二进制包。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="17" MatchPercent="" Bindex="9" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;如果开发商没有许可证，这提示或移动到其他的解决方案并不能使他\/她有资格重新编解码器使用。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sl><tl>如果开发人员没有许可证，这提示或移动到其他的解决方案也并不能使他/她有资格分发包含转悠解码器的包。</tl><tsl /><prv /><sfl>In recent versions of Chromium project, ffmpeg DLL was changed to be builtin. And we don't have license to redistribute the codec in question. So developers don't have any ways to get the codec without compiling. To make things easier, we build ffmpeg as a separate Dll. The Dll we distribute will not contain any proprietary codecs in question. Developers can recompile the Dll for themselves, which is much easier than compiling NW. Or they can get Dll from someone else [from the community](https://github.com/nwjs/nw.js/issues/4492). Note that developers can redistribute binaries containing proprietary codecs as long as they have the license. If a developer doesn't have the license, using this tip or moving to other solutions doesn't make him/her eligible to redistribute the codecs.</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;为了使用MP3和H.264，你需要编译ffmpeg补丁和相应的选项。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>In order to use MP3 and H.264, you'll need to compile ffmpeg with patch and corresponding options.</sl><tl>为了使用MP3和H.264，你需要通过补丁和相应的选项来编译ffmpeg。</tl><tsl /><prv /><sfl>In order to use MP3 and H.264, you'll need to compile ffmpeg with patch and corresponding options.</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;*步骤1。*适用以下补丁` third_party \/ FFmpeg \/ FFmpeg。石膏`使` ffmpeg `包括编解码器：&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>**Step 1.** Apply following patch to `third_party/ffmpeg/ffmpeg.gyp` to make `ffmpeg` include the codecs:</sl><tl>**步骤1. ** 使用以下补丁`third_party/ffmpeg/ffmpeg.gyp`  使` ffmpeg `包含编解码器：</tl><tsl /><prv /><sfl>**Step 1.** Apply following patch to `third_party/ffmpeg/ffmpeg.gyp` to make `ffmpeg` include the codecs:</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;` ` ` diff&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>```diff</sl><tl>```diff</tl><tsl /><prv /><sfl>```diff</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;diff，Git的\/ ffmpeg.gyp B \/ ffmpeg.gyp&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>diff --git a/ffmpeg.gyp b/ffmpeg.gyp                   </sl><tl>diff --git a/ffmpeg.gyp b/ffmpeg.gyp                   
</tl><tsl /><prv /><sfl>diff --git a/ffmpeg.gyp b/ffmpeg.gyp                   </sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;指数294dd2e 7dfcd3a 100755 ..&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>index 294dd2e..7dfcd3a 100755                          </sl><tl>index 294dd2e..7dfcd3a 100755                          </tl><tsl /><prv /><sfl>index 294dd2e..7dfcd3a 100755                          </sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;——\/ ffmpeg.gyp&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>--- a/ffmpeg.gyp                                       </sl><tl>--- a/ffmpeg.gyp                                       </tl><tsl /><prv /><sfl>--- a/ffmpeg.gyp                                       </sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;+ + + \/ ffmpeg.gyp&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>+++ b/ffmpeg.gyp                                       </sl><tl>+++ b/ffmpeg.gyp                                       </tl><tsl /><prv /><sfl>+++ b/ffmpeg.gyp                                       </sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>@@ -72,7 +72,7 @@                                      </sl><tl>@@ -72,7 +72,7 @@                                      </tl><tsl /><prv /><sfl>@@ -72,7 +72,7 @@                                      </sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;译文有符号()[]{}（）《》错误&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;[ 'chromeos = = 1，{&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>       ['chromeos == 1', {                             </sl><tl>       ['chromeos == 1', {                             </tl><tsl /><prv /><sfl>       ['chromeos == 1', {                             </sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;“ffmpeg_branding %：&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>         'ffmpeg_branding%': </sl><tl>         'ffmpeg_branding%': </tl><tsl /><prv /><sfl>         'ffmpeg_branding%': '&lt;(branding)OS',          </sfl></tu><tu PI="27" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;译文有符号()[]{}（）《》错误&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;“&lt;（品牌）操作系统'，&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>'&lt;(branding)OS',          </sl><tl>'&lt;(branding)OS',          </tl><tsl /><prv /><sfl>         'ffmpeg_branding%': '&lt;(branding)OS',          </sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;术语不一致(#|#)&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;}，{ #否则承担铬\/铬。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>       }, {  # otherwise, assume Chrome/Chromium. </sl><tl>       }, {  # otherwise, assume Chrome/Chromium. </tl><tsl /><prv /><sfl>       }, {  # otherwise, assume Chrome/Chromium.      </sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;术语不一致(-|-)&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;“ffmpeg_branding %：&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>-        'ffmpeg_branding%': </sl><tl>-        'ffmpeg_branding%': </tl><tsl /><prv /><sfl>-        'ffmpeg_branding%': '&lt;(branding)',            </sfl></tu><tu PI="29" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;译文有符号()[]{}（）《》错误&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;&lt;（品牌），&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>'&lt;(branding)',            </sl><tl>'&lt;(branding)',            </tl><tsl /><prv /><sfl>-        'ffmpeg_branding%': '&lt;(branding)',            </sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;+ ffmpeg_branding %：&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>+        'ffmpeg_branding%': </sl><tl>+        'ffmpeg_branding%': </tl><tsl /><prv /><sfl>+        'ffmpeg_branding%': 'Chrome'                  </sfl></tu><tu PI="30" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;'铬'&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>'Chrome'                  </sl><tl>'Chrome'                  </tl><tsl /><prv /><sfl>+        'ffmpeg_branding%': 'Chrome'                  </sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;译文有符号()[]{}（）《》错误&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>       }],                                             </sl><tl>       }],                                             </tl><tsl /><prv /><sfl>       }],                                             </sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;译文有符号()[]{}（）《》错误&quot;,&quot;ErrorStatus&quot;:&quot;Warning&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>     ],                                                </sl><tl>     ],                                                </tl><tsl /><prv /><sfl>     ],                                                </sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>```</sl><tl>```</tl><tsl /><prv /><sfl>```</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;*步骤2。**再生石膏文件再次` gclient runhooks `。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>**Step 2.** Regenerate the gyp files again with `gclient runhooks`.</sl><tl>**步骤2。** 通过`gclient runhooks`重新生成gyp文件</tl><tsl /><prv /><sfl>**Step 2.** Regenerate the gyp files again with `gclient runhooks`.</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT#&quot;,&quot;SourceWord&quot;:&quot;*步骤3。**重建ffmpeg DLL与`忍者C \/释放ffmpeg `。&quot;,&quot;TranStatus&quot;:&quot;已完成&quot;}" StateTranslation="True"><sl>**Step 3.** Rebuild ffmpeg Dll with `ninja -C out/Release ffmpeg`.</sl><tl>*步骤3。** 通过 `ninja -C out/Release ffmpeg`来重建ffmpeg DLL </tl><tsl /><prv /><sfl>**Step 3.** Rebuild ffmpeg Dll with `ninja -C out/Release ffmpeg`.</sfl></tu></body></Transmate>