<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/10 14:45:58" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\From 0.12 to 0.13\From 0.12 to 0.13.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="984" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\记忆库\nw.js记忆库\nw.js记忆库.uetm" CustomTermPath="D:\workspace_github\nw.js\nw.js\术语库\nw.js术语库\nw.js术语库.uetb|" PreviewPath="D:\workspace_github\nw.js\nw.js\From 0.12 to 0.13\From 0.12 to 0.13Preview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;#迁移从0.12到0.13 {：&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl># Migrate from 0.12 to 0.13 {: </sl><tl>#迁移从0.12到0.13 {：</tl><tsl /><prv /><sfl># Migrate from 0.12 to 0.13 {: doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;doc }&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>doctitle}</sl><tl>doc }</tl><tsl /><prv /><sfl># Migrate from 0.12 to 0.13 {: doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;&quot;,&quot;SourceWord&quot;:&quot;&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>---</sl><tl>———</tl><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;100%&quot;,&quot;SourceWord&quot;:&quot;[目录]&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>[TOC]</sl><tl>[目录]</tl><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# #结构变化&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>## Architecture Changes</sl><tl># #结构变化</tl><tsl /><prv /><sfl>## Architecture Changes</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ nw.js应用运行Chrome应用程序内部。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ NW.js application is running as a Chrome App internally. </sl><tl>+ nw.js应用运行Chrome应用程序内部。</tl><tsl /><prv /><sfl>+ NW.js application is running as a Chrome App internally. All chrome.* platform APIs and features can be used in NW application now. The default protocol is changed from `file://` to `chrome-extension://`, where the host part of the URL is the generated id. The `app://` protocol in 0.12 is replaced by `chrome-extension://` protocol.</sfl></tu><tu PI="5" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;所有的铬，*平台的原料药和功能，可用于在西北的应用。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>All chrome.* platform APIs and features can be used in NW application now. </sl><tl>所有的铬，*平台的原料药和功能，可用于在西北的应用。</tl><tsl /><prv /><sfl>+ NW.js application is running as a Chrome App internally. All chrome.* platform APIs and features can be used in NW application now. The default protocol is changed from `file://` to `chrome-extension://`, where the host part of the URL is the generated id. The `app://` protocol in 0.12 is replaced by `chrome-extension://` protocol.</sfl></tu><tu PI="5" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;默认的协议是从文件更改为：\/ \/“铬扩展：\/ \/”，其中的主机部分的网址是生成的ID。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>The default protocol is changed from `file://` to `chrome-extension://`, where the host part of the URL is the generated id. </sl><tl>默认的协议是从文件更改为：/ /“铬扩展：/ /”，其中的主机部分的网址是生成的ID。</tl><tsl /><prv /><sfl>+ NW.js application is running as a Chrome App internally. All chrome.* platform APIs and features can be used in NW application now. The default protocol is changed from `file://` to `chrome-extension://`, where the host part of the URL is the generated id. The `app://` protocol in 0.12 is replaced by `chrome-extension://` protocol.</sfl></tu><tu PI="5" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;应用程序：\/ \/在0.12被替换为“铬扩展：\/ \/”协议。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>The `app://` protocol in 0.12 is replaced by `chrome-extension://` protocol.</sl><tl>应用程序：/ /在0.12被替换为“铬扩展：/ /”协议。</tl><tsl /><prv /><sfl>+ NW.js application is running as a Chrome App internally. All chrome.* platform APIs and features can be used in NW application now. The default protocol is changed from `file://` to `chrome-extension://`, where the host part of the URL is the generated id. The `app://` protocol in 0.12 is replaced by `chrome-extension://` protocol.</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+所有西北特定的API，包括` require() `移至` NW `对象从` NW。桂`图书馆。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ All NW specific APIs, including `require()` is moved into a `nw` object from the `nw.gui` library. </sl><tl>+所有西北特定的API，包括` require() `移至` NW `对象从` NW。桂`图书馆。</tl><tsl /><prv /><sfl>+ All NW specific APIs, including `require()` is moved into a `nw` object from the `nw.gui` library. However, we provided a builtin wrapper library to provide compatibility for 0.12 apps. You can use `nw.gui` library for some time before we deprecate it in 0.14 or later.</sfl></tu><tu PI="6" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;然而，我们提供0.12的应用程序兼容性提供了一个内置的包装库。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>However, we provided a builtin wrapper library to provide compatibility for 0.12 apps. </sl><tl>然而，我们提供0.12的应用程序兼容性提供了一个内置的包装库。</tl><tsl /><prv /><sfl>+ All NW specific APIs, including `require()` is moved into a `nw` object from the `nw.gui` library. However, we provided a builtin wrapper library to provide compatibility for 0.12 apps. You can use `nw.gui` library for some time before we deprecate it in 0.14 or later.</sfl></tu><tu PI="6" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;你可以使用` NW。桂`图书馆前一段时间我们认为它在0.14或更高版本。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>You can use `nw.gui` library for some time before we deprecate it in 0.14 or later.</sl><tl>你可以使用` NW。桂`图书馆前一段时间我们认为它在0.14或更高版本。</tl><tsl /><prv /><sfl>+ All NW specific APIs, including `require()` is moved into a `nw` object from the `nw.gui` library. However, we provided a builtin wrapper library to provide compatibility for 0.12 apps. You can use `nw.gui` library for some time before we deprecate it in 0.14 or later.</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ Node.js语境放在后台页面DOM的上下文，这是共享之间打开窗户在0.12之前。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ The Node.js context is put in the DOM context of the background page, which is shared between opening windows as in 0.12 and before. </sl><tl>+ Node.js语境放在后台页面DOM的上下文，这是共享之间打开窗户在0.12之前。</tl><tsl /><prv /><sfl>+ The Node.js context is put in the DOM context of the background page, which is shared between opening windows as in 0.12 and before. The difference is you have access to all DOM features and chrome.* platform APIs in the Node context in 0.13.</sfl></tu><tu PI="7" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;不同的是你可以访问所有的DOM特征和铬。*在节点的上下文的API在0.13平台。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>The difference is you have access to all DOM features and chrome.* platform APIs in the Node context in 0.13.</sl><tl>不同的是你可以访问所有的DOM特征和铬。*在节点的上下文的API在0.13平台。</tl><tsl /><prv /><sfl>+ The Node.js context is put in the DOM context of the background page, which is shared between opening windows as in 0.12 and before. The difference is you have access to all DOM features and chrome.* platform APIs in the Node context in 0.13.</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+应用程序的条目是JS或者HTML 0.12，而作为应用内浏览器应用程序，第一个窗口应该推出JS从背景页。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ The entry of the application is either JS or HTML as in 0.12, but as the application is internally a Chrome App, the first window is supposed to be launched by JS from the background page. </sl><tl>+应用程序的条目是JS或者HTML 0.12，而作为应用内浏览器应用程序，第一个窗口应该推出JS从背景页。</tl><tsl /><prv /><sfl>+ The entry of the application is either JS or HTML as in 0.12, but as the application is internally a Chrome App, the first window is supposed to be launched by JS from the background page. If you specify a HTML file as the entry with "main" field in package.json, NW will use a default JS to open the first window and load it.</sfl></tu><tu PI="8" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;如果你指定一个HTML文件作为“package.json主”领域的进入，NW将使用默认的JS打开一个窗口，加载它。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>If you specify a HTML file as the entry with "main" field in package.json, NW will use a default JS to open the first window and load it.</sl><tl>如果你指定一个HTML文件作为“package.json主”领域的进入，NW将使用默认的JS打开一个窗口，加载它。</tl><tsl /><prv /><sfl>+ The entry of the application is either JS or HTML as in 0.12, but as the application is internally a Chrome App, the first window is supposed to be launched by JS from the background page. If you specify a HTML file as the entry with "main" field in package.json, NW will use a default JS to open the first window and load it.</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+如果nw.js混合模式下运行（[背景] \/高级\/ JavaScript上下文在西北。JS。MD #混合上下文模式）（引导nw.js与` --混合语境`参数），` NW。* `是对`窗口镜种。* `。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ If NW.js is running under [Mixed Context Mode](../Advanced/JavaScript Contexts in NW.js.md#mixed-context-mode) (boot NW.js with `--mixed-context` argument), `nw.*` is kind of mirror of `window.*`. </sl><tl>+如果nw.js混合模式下运行（[背景] /高级/ JavaScript上下文在西北。JS。MD #混合上下文模式）（引导nw.js与` --混合语境`参数），` NW。* `是对`窗口镜种。* `。</tl><tsl /><prv /><sfl>+ If NW.js is running under [Mixed Context Mode](../Advanced/JavaScript Contexts in NW.js.md#mixed-context-mode) (boot NW.js with `--mixed-context` argument), `nw.*` is kind of mirror of `window.*`. In this mode, you **CANNOT** share variables among frames or windows by assigning it to Node context. So do **NOT** turn on Mixed Context mode if your application is heavily depending on this variable sharing feature.</sfl></tu><tu PI="9" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;在这种模式下，您不能* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>In this mode, you **CANNOT** share variables among frames or windows by assigning it to Node context. </sl><tl>在这种模式下，您不能* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *。</tl><tsl /><prv /><sfl>+ If NW.js is running under [Mixed Context Mode](../Advanced/JavaScript Contexts in NW.js.md#mixed-context-mode) (boot NW.js with `--mixed-context` argument), `nw.*` is kind of mirror of `window.*`. In this mode, you **CANNOT** share variables among frames or windows by assigning it to Node context. So do **NOT** turn on Mixed Context mode if your application is heavily depending on this variable sharing feature.</sfl></tu><tu PI="9" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;如果你的应用程序在很大程度上取决于这个变量共享功能，那么请不要在混合的上下文模式下打开混合的模式。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>So do **NOT** turn on Mixed Context mode if your application is heavily depending on this variable sharing feature.</sl><tl>如果你的应用程序在很大程度上取决于这个变量共享功能，那么请不要在混合的上下文模式下打开混合的模式。</tl><tsl /><prv /><sfl>+ If NW.js is running under [Mixed Context Mode](../Advanced/JavaScript Contexts in NW.js.md#mixed-context-mode) (boot NW.js with `--mixed-context` argument), `nw.*` is kind of mirror of `window.*`. In this mode, you **CANNOT** share variables among frames or windows by assigning it to Node context. So do **NOT** turn on Mixed Context mode if your application is heavily depending on this variable sharing feature.</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # Node.js的变化&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>## Node.js Changes</sl><tl># # Node.js的变化</tl><tsl /><prv /><sfl>## Node.js Changes</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ Node.js被撞5。X的新版本。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Node.js is bumped to 5.x in latest build. </sl><tl>+ Node.js被撞5。X的新版本。</tl><tsl /><prv /><sfl>+ Node.js is bumped to 5.x in latest build. Check your NPM modules to make sure they support Node.js 5.x **especially for native modules**. There is [a list of native modules](https://github.com/nodejs/node/issues/2798) which should be migrated to latest NaN 2.</sfl></tu><tu PI="11" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;检查你的NPM模块以确保他们支持Node.js 5。x *特别是本地模块*。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>Check your NPM modules to make sure they support Node.js 5.x **especially for native modules**. </sl><tl>检查你的NPM模块以确保他们支持Node.js 5。x *特别是本地模块*。</tl><tsl /><prv /><sfl>+ Node.js is bumped to 5.x in latest build. Check your NPM modules to make sure they support Node.js 5.x **especially for native modules**. There is [a list of native modules](https://github.com/nodejs/node/issues/2798) which should be migrated to latest NaN 2.</sfl></tu><tu PI="11" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;有[清单]本地模块（https:\/\/github.com\/nodejs\/node\/issues\/2798）应该迁移到新的南2。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>There is [a list of native modules](https://github.com/nodejs/node/issues/2798) which should be migrated to latest NaN 2.</sl><tl>有[清单]本地模块（https://github.com/nodejs/node/issues/2798）应该迁移到新的南2。</tl><tsl /><prv /><sfl>+ Node.js is bumped to 5.x in latest build. Check your NPM modules to make sure they support Node.js 5.x **especially for native modules**. There is [a list of native modules](https://github.com/nodejs/node/issues/2798) which should be migrated to latest NaN 2.</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+添加西北版本信息处理。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Add NW version information to process.versions[`nw`]. </sl><tl>+添加西北版本信息处理。</tl><tsl /><prv /><sfl>+ Add NW version information to process.versions[`nw`]. process.versions[`node-webkit`] will be deprecated later.</sfl></tu><tu PI="12" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;过程。版本[ `节点WebKit ` ]将被废弃后。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>process.versions[`node-webkit`] will be deprecated later.</sl><tl>过程。版本[ `节点WebKit ` ]将被废弃后。</tl><tsl /><prv /><sfl>+ Add NW version information to process.versions[`nw`]. process.versions[`node-webkit`] will be deprecated later.</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # API的变化&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>## API Changes</sl><tl># # API的变化</tl><tsl /><prv /><sfl>## API Changes</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # #建立口味&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>### Build Flavors</sl><tl># # #建立口味</tl><tsl /><prv /><sfl>### Build Flavors</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+不同的构建口味支持不同的原料药和能力。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Different build flavors support different set of APIs and capabilities. </sl><tl>+不同的构建口味支持不同的原料药和能力。</tl><tsl /><prv /><sfl>+ Different build flavors support different set of APIs and capabilities. See [Build Flavors](../Advanced/Build Flavors.md) to choose the right NW.js flavor or [build your own](../../For Developers/Building NW.js.md).</sfl></tu><tu PI="15" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;看到[口味]（建立\/高级\/建造的味道。MD）选择合适的nw.js风味或[建立自己的]（\/ \/开发商\/建筑西北。JS。MD）。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>See [Build Flavors](../Advanced/Build Flavors.md) to choose the right NW.js flavor or [build your own](../../For Developers/Building NW.js.md).</sl><tl>看到[口味]（建立/高级/建造的味道。MD）选择合适的nw.js风味或[建立自己的]（/ /开发商/建筑西北。JS。MD）。</tl><tsl /><prv /><sfl>+ Different build flavors support different set of APIs and capabilities. See [Build Flavors](../Advanced/Build Flavors.md) to choose the right NW.js flavor or [build your own](../../For Developers/Building NW.js.md).</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # #捷径&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>### Shorcut</sl><tl># # #捷径</tl><tsl /><prv /><sfl>### Shorcut</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ `快捷` API不*不*地图&lt;大骨节病&gt; Ctrl &lt; \/大骨节病&gt;修改&gt;和&lt;大骨节病# 8984；&lt; \/大骨节病&gt; Mac OS X。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `Shortcut` API does **NOT** map &lt;kbd&gt;Ctrl&lt;/kbd&gt; modifier to &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt; on Mac OS X. </sl><tl>+ `快捷` API不*不*地图&lt;大骨节病&gt; Ctrl &lt; /大骨节病&gt;修改&gt;和&lt;大骨节病# 8984；&lt; /大骨节病&gt; Mac OS X。</tl><tsl /><prv /><sfl>+ `Shortcut` API does **NOT** map &lt;kbd&gt;Ctrl&lt;/kbd&gt; modifier to &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt; on Mac OS X. However 0.13.0 supports `Command` modifier in cross platform way. So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. See [Shortcut.key](../../References/Shortcut.md#shortcutkey) for details.</sfl></tu><tu PI="17" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;然而`命令` 0.1~3.0支持跨平台的方式修饰。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>However 0.13.0 supports `Command` modifier in cross platform way. </sl><tl>然而`命令` 0.1~3.0支持跨平台的方式修饰。</tl><tsl /><prv /><sfl>+ `Shortcut` API does **NOT** map &lt;kbd&gt;Ctrl&lt;/kbd&gt; modifier to &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt; on Mac OS X. However 0.13.0 supports `Command` modifier in cross platform way. So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. See [Shortcut.key](../../References/Shortcut.md#shortcutkey) for details.</sfl></tu><tu PI="17" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;所以这是你的责任来检测操作系统和选择合适的改性剂注册热键。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. </sl><tl>所以这是你的责任来检测操作系统和选择合适的改性剂注册热键。</tl><tsl /><prv /><sfl>+ `Shortcut` API does **NOT** map &lt;kbd&gt;Ctrl&lt;/kbd&gt; modifier to &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt; on Mac OS X. However 0.13.0 supports `Command` modifier in cross platform way. So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. See [Shortcut.key](../../References/Shortcut.md#shortcutkey) for details.</sfl></tu><tu PI="17" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;看到[快捷键。键]（\/ \/引用\/捷径。MD # shortcutkey）详情。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>See [Shortcut.key](../../References/Shortcut.md#shortcutkey) for details.</sl><tl>看到[快捷键。键]（/ /引用/捷径。MD # shortcutkey）详情。</tl><tsl /><prv /><sfl>+ `Shortcut` API does **NOT** map &lt;kbd&gt;Ctrl&lt;/kbd&gt; modifier to &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt; on Mac OS X. However 0.13.0 supports `Command` modifier in cross platform way. So it's your responsible to detect the OS and choose the right modifier when registering hotkeys. See [Shortcut.key](../../References/Shortcut.md#shortcutkey) for details.</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # #清单格式&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>### Manifest Format</sl><tl># # #清单格式</tl><tsl /><prv /><sfl>### Manifest Format</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【`单实例` ]（\/ \/引用\/清单格式。MD #单实例）**被**和它总是`真`。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [`single-instance`](../../References/Manifest Format.md#single-instance) is **deprecated** and it's always `true`. </sl><tl>+【`单实例` ]（/ /引用/清单格式。MD #单实例）**被**和它总是`真`。</tl><tsl /><prv /><sfl>+ [`single-instance`](../../References/Manifest Format.md#single-instance) is **deprecated** and it's always `true`. You **CANNOT** have multiple instances for your app unless you're using different user data directory (by `--user-data-dir`). You may also want to use the [open event](../../References/App.md#event-openargs): the first instance will be notified with this event when user tries to launch the second instance.</sfl></tu><tu PI="19" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;你*不*为你的应用程序的多个实例，除非你使用不同的用户数据目录（由` --用户数据目录`）。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>You **CANNOT** have multiple instances for your app unless you're using different user data directory (by `--user-data-dir`). </sl><tl>你*不*为你的应用程序的多个实例，除非你使用不同的用户数据目录（由` --用户数据目录`）。</tl><tsl /><prv /><sfl>+ [`single-instance`](../../References/Manifest Format.md#single-instance) is **deprecated** and it's always `true`. You **CANNOT** have multiple instances for your app unless you're using different user data directory (by `--user-data-dir`). You may also want to use the [open event](../../References/App.md#event-openargs): the first instance will be notified with this event when user tries to launch the second instance.</sfl></tu><tu PI="19" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;您可能还需要使用[开启事件]（\/ \/引用\/应用程序。MD #事件openargs）：&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>You may also want to use the [open event](../../References/App.md#event-openargs): </sl><tl>您可能还需要使用[开启事件]（/ /引用/应用程序。MD #事件openargs）：</tl><tsl /><prv /><sfl>+ [`single-instance`](../../References/Manifest Format.md#single-instance) is **deprecated** and it's always `true`. You **CANNOT** have multiple instances for your app unless you're using different user data directory (by `--user-data-dir`). You may also want to use the [open event](../../References/App.md#event-openargs): the first instance will be notified with this event when user tries to launch the second instance.</sfl></tu><tu PI="19" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;当用户试图启动第二个实例时，将通知该事件的第一个实例。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>the first instance will be notified with this event when user tries to launch the second instance.</sl><tl>当用户试图启动第二个实例时，将通知该事件的第一个实例。</tl><tsl /><prv /><sfl>+ [`single-instance`](../../References/Manifest Format.md#single-instance) is **deprecated** and it's always `true`. You **CANNOT** have multiple instances for your app unless you're using different user data directory (by `--user-data-dir`). You may also want to use the [open event](../../References/App.md#event-openargs): the first instance will be notified with this event when user tries to launch the second instance.</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【`工具栏` ]（\/ \/引用\/清单格式。MD #工具栏）**被**和它总是`假`。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [`toolbar`](../../References/Manifest Format.md#toolbar) is **deprecated** and it's always `false`. </sl><tl>+【`工具栏` ]（/ /引用/清单格式。MD #工具栏）**被**和它总是`假`。</tl><tsl /><prv /><sfl>+ [`toolbar`](../../References/Manifest Format.md#toolbar) is **deprecated** and it's always `false`. The traditional toolbar will **NOT** be supported including the reload buttons, location bar and DevTools buttons. As a workaround, you can open / close DevTools with &lt;kbd&gt;F12&lt;/kbd&gt; (Windows &amp; Linux) or &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8997;&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt; (Mac). And use [`win.reload()`](../../References/Window.md#winreload) and [`win.reloadDev()`](../../References/Window.md#winreloaddev) to simulate the reload buttons.</sfl></tu><tu PI="20" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;传统的工具栏将××××的支持包括刷新按钮，地址栏和工具按钮。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>The traditional toolbar will **NOT** be supported including the reload buttons, location bar and DevTools buttons. </sl><tl>传统的工具栏将××××的支持包括刷新按钮，地址栏和工具按钮。</tl><tsl /><prv /><sfl>+ [`toolbar`](../../References/Manifest Format.md#toolbar) is **deprecated** and it's always `false`. The traditional toolbar will **NOT** be supported including the reload buttons, location bar and DevTools buttons. As a workaround, you can open / close DevTools with &lt;kbd&gt;F12&lt;/kbd&gt; (Windows &amp; Linux) or &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8997;&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt; (Mac). And use [`win.reload()`](../../References/Window.md#winreload) and [`win.reloadDev()`](../../References/Window.md#winreloaddev) to simulate the reload buttons.</sfl></tu><tu PI="20" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;作为一种替代方法，您可以打开\/关闭与大骨节病&gt;&gt; &lt;&lt; F12 &lt; \/大骨节病&gt;工具（Windows和Linux）或&lt;&lt;大骨节病&gt;和# 8984；&lt; &gt; + &lt; &gt; \/大骨节病大骨节病及# 8997；&lt; &gt; + &lt; \/大骨节病大骨节病&gt;我&lt; \/大骨节病&gt;（MAC）。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>As a workaround, you can open / close DevTools with &lt;kbd&gt;F12&lt;/kbd&gt; (Windows &amp; Linux) or &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8997;&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt; (Mac). </sl><tl>作为一种替代方法，您可以打开/关闭与大骨节病&gt;&gt; &lt;&lt; F12 &lt; /大骨节病&gt;工具（Windows和Linux）或&lt;&lt;大骨节病&gt;和# 8984；&lt; &gt; + &lt; &gt; /大骨节病大骨节病及# 8997；&lt; &gt; + &lt; /大骨节病大骨节病&gt;我&lt; /大骨节病&gt;（MAC）。</tl><tsl /><prv /><sfl>+ [`toolbar`](../../References/Manifest Format.md#toolbar) is **deprecated** and it's always `false`. The traditional toolbar will **NOT** be supported including the reload buttons, location bar and DevTools buttons. As a workaround, you can open / close DevTools with &lt;kbd&gt;F12&lt;/kbd&gt; (Windows &amp; Linux) or &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8997;&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt; (Mac). And use [`win.reload()`](../../References/Window.md#winreload) and [`win.reloadDev()`](../../References/Window.md#winreloaddev) to simulate the reload buttons.</sfl></tu><tu PI="20" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;使用[ `赢。reload() ` ]（\/ \/引用\/窗口。MD # winreload）和[ `赢。reloaddev() ` ]（\/ \/引用\/窗口。MD # winreloaddev）模拟加载按钮。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>And use [`win.reload()`](../../References/Window.md#winreload) and [`win.reloadDev()`](../../References/Window.md#winreloaddev) to simulate the reload buttons.</sl><tl>使用[ `赢。reload() ` ]（/ /引用/窗口。MD # winreload）和[ `赢。reloaddev() ` ]（/ /引用/窗口。MD # winreloaddev）模拟加载按钮。</tl><tsl /><prv /><sfl>+ [`toolbar`](../../References/Manifest Format.md#toolbar) is **deprecated** and it's always `false`. The traditional toolbar will **NOT** be supported including the reload buttons, location bar and DevTools buttons. As a workaround, you can open / close DevTools with &lt;kbd&gt;F12&lt;/kbd&gt; (Windows &amp; Linux) or &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8997;&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt; (Mac). And use [`win.reload()`](../../References/Window.md#winreload) and [`win.reloadDev()`](../../References/Window.md#winreloaddev) to simulate the reload buttons.</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【`没有编辑菜单` ]（\/ \/引用\/清单格式。MD #没有编辑菜单MAC）**被**。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [`no-edit-menu`](../../References/Manifest Format.md#no-edit-menu-mac) is **deprecated**.</sl><tl>+【`没有编辑菜单` ]（/ /引用/清单格式。MD #没有编辑菜单MAC）**被**。</tl><tsl /><prv /><sfl>+ [`no-edit-menu`](../../References/Manifest Format.md#no-edit-menu-mac) is **deprecated**.</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【`快照` ]（\/ \/引用\/清单格式。MD #快照）**被**。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [`snapshot`](../../References/Manifest Format.md#snapshot) is **deprecated**. </sl><tl>+【`快照` ]（/ /引用/清单格式。MD #快照）**被**。</tl><tsl /><prv /><sfl>+ [`snapshot`](../../References/Manifest Format.md#snapshot) is **deprecated**. Use [`win.evalNWBin()`](../../References/Window.md#winevalnwbin) instead.</sfl></tu><tu PI="22" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;使用[ `赢。evalnwbin() ` ]（\/ \/引用\/窗口。MD # winevalnwbin）代替。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>Use [`win.evalNWBin()`](../../References/Window.md#winevalnwbin) instead.</sl><tl>使用[ `赢。evalnwbin() ` ]（/ /引用/窗口。MD # winevalnwbin）代替。</tl><tsl /><prv /><sfl>+ [`snapshot`](../../References/Manifest Format.md#snapshot) is **deprecated**. Use [`win.evalNWBin()`](../../References/Window.md#winevalnwbin) instead.</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【`节点远程`格式]（\/ \/引用\/清单格式。MD #节点远程）改为数组[匹配模式]（https:\/\/developer.chrome.com\/extensions\/match_patterns）通过Chrome扩展应用。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ The format of [`node-remote`](../../References/Manifest Format.md#node-remote) is changed to array of [match patterns](https://developer.chrome.com/extensions/match_patterns) used by Chrome extension.</sl><tl>+【`节点远程`格式]（/ /引用/清单格式。MD #节点远程）改为数组[匹配模式]（https://developer.chrome.com/extensions/match_patterns）通过Chrome扩展应用。</tl><tsl /><prv /><sfl>+ The format of [`node-remote`](../../References/Manifest Format.md#node-remote) is changed to array of [match patterns](https://developer.chrome.com/extensions/match_patterns) used by Chrome extension.</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+窗口选项`总是顶`，`在所有工作区`可见，`新实例`，`注入JS开始`和`注入JS端`更名为[ ` always_on_top ` ]（\/ \/引用\/清单格式。MD # always_on_top），[ ` visible_on_all_workspaces ` ]（..或.. \/引用\/清单格式。MD # visible_on_all_workspaces），` new_instance `，` inject_js_start `和` inject_js_end `分别在`包。JSON `或作为`窗口参数。open() `。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Window options `always-on-top`, `visible-on-all-workspaces`, `new-instance`, `inject-js-start` and `inject-js-end` is renamed to [`always_on_top`](../../References/Manifest Format.md#always_on_top), [`visible_on_all_workspaces`](../../References/Manifest Format.md#visible_on_all_workspaces), `new_instance`, `inject_js_start` and `inject_js_end` respectively in `package.json` or as argument of `Window.open()`.</sl><tl>+窗口选项`总是顶`，`在所有工作区`可见，`新实例`，`注入JS开始`和`注入JS端`更名为[ ` always_on_top ` ]（/ /引用/清单格式。MD # always_on_top），[ ` visible_on_all_workspaces ` ]（..或.. /引用/清单格式。MD # visible_on_all_workspaces），` new_instance `，` inject_js_start `和` inject_js_end `分别在`包。JSON `或作为`窗口参数。open() `。</tl><tsl /><prv /><sfl>+ Window options `always-on-top`, `visible-on-all-workspaces`, `new-instance`, `inject-js-start` and `inject-js-end` is renamed to [`always_on_top`](../../References/Manifest Format.md#always_on_top), [`visible_on_all_workspaces`](../../References/Manifest Format.md#visible_on_all_workspaces), `new_instance`, `inject_js_start` and `inject_js_end` respectively in `package.json` or as argument of `Window.open()`.</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # #窗口&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>### Window</sl><tl># # #窗口</tl><tsl /><prv /><sfl>### Window</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+有一个标识，以确定每个窗口。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ There is an id to identify each window. </sl><tl>+有一个标识，以确定每个窗口。</tl><tsl /><prv /><sfl>+ There is an id to identify each window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. The default id is `.main`. It could be specified in [Window.open](../../References/Window.md#windowopenurl-options-callback)</sfl></tu><tu PI="26" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;这将是用来记住窗口的大小和位置，并恢复该几何体当一个窗口与相同的身份证是后来打开。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. </sl><tl>这将是用来记住窗口的大小和位置，并恢复该几何体当一个窗口与相同的身份证是后来打开。</tl><tsl /><prv /><sfl>+ There is an id to identify each window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. The default id is `.main`. It could be specified in [Window.open](../../References/Window.md#windowopenurl-options-callback)</sfl></tu><tu PI="26" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;默认的身份证是“。”。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>The default id is `.main`. </sl><tl>默认的身份证是“。”。</tl><tsl /><prv /><sfl>+ There is an id to identify each window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. The default id is `.main`. It could be specified in [Window.open](../../References/Window.md#windowopenurl-options-callback)</sfl></tu><tu PI="26" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;它可以在[指定的窗口。打开]（\/ \/引用\/窗口。MD # windowopenurl选择回调）&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>It could be specified in [Window.open](../../References/Window.md#windowopenurl-options-callback)</sl><tl>它可以在[指定的窗口。打开]（/ /引用/窗口。MD # windowopenurl选择回调）</tl><tsl /><prv /><sfl>+ There is an id to identify each window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. The default id is `.main`. It could be specified in [Window.open](../../References/Window.md#windowopenurl-options-callback)</sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+事件` capturepagedone `的[ `窗口` API ]（\/ \/引用\/窗口。MD #事件capturepagedone）**被**。使用回调与[ `赢。capturepage（回调[配置]）` ]（\/ \/引用\/窗口。MD # wincapturepagecallback -配置-）代替。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Event `capturepagedone` of [`Window` API](../../References/Window.md#event-capturepagedone) is **deprecated**.Use the callback with the [`win.capturePage(callback [, config ])`](../../References/Window.md#wincapturepagecallback--config-) instead.</sl><tl>+事件` capturepagedone `的[ `窗口` API ]（/ /引用/窗口。MD #事件capturepagedone）**被**。使用回调与[ `赢。capturepage（回调[配置]）` ]（/ /引用/窗口。MD # wincapturepagecallback -配置-）代替。</tl><tsl /><prv /><sfl>+ Event `capturepagedone` of [`Window` API](../../References/Window.md#event-capturepagedone) is **deprecated**.Use the callback with the [`win.capturePage(callback [, config ])`](../../References/Window.md#wincapturepagecallback--config-) instead.</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【窗口。打开]（\/ \/引用\/窗口。MD # windowopenurl选择回调）改为通过创建窗口的回调函数参数。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [Window.open](../../References/Window.md#windowopenurl-options-callback) is changed to passing the created window as the argument of the callback.</sl><tl>+【窗口。打开]（/ /引用/窗口。MD # windowopenurl选择回调）改为通过创建窗口的回调函数参数。</tl><tsl /><prv /><sfl>+ [Window.open](../../References/Window.md#windowopenurl-options-callback) is changed to passing the created window as the argument of the callback.</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ [窗口]。showdevtools（\/ \/引用\/窗口。MD # winshowdevtoolsiframe头回调）改为通过创建窗口的回调函数参数。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [Window.showDevtools](../../References/Window.md#winshowdevtoolsiframe-headless-callback) is changed to passing the created window as the argument of the callback.</sl><tl>+ [窗口]。showdevtools（/ /引用/窗口。MD # winshowdevtoolsiframe头回调）改为通过创建窗口的回调函数参数。</tl><tsl /><prv /><sfl>+ [Window.showDevtools](../../References/Window.md#winshowdevtoolsiframe-headless-callback) is changed to passing the created window as the argument of the callback.</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【赢。settransparent ]（\/ \/引用\/窗口。MD # winsettransparent）**被**。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [win.setTransparent](../../References/Window.md#winsettransparent) is **deprecated**. </sl><tl>+【赢。settransparent ]（/ /引用/窗口。MD # winsettransparent）**被**。</tl><tsl /><prv /><sfl>+ [win.setTransparent](../../References/Window.md#winsettransparent) is **deprecated**. You can't change the transparency after window is created.</sfl></tu><tu PI="30" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;在窗口创建后，你不能改变透明度。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>You can't change the transparency after window is created.</sl><tl>在窗口创建后，你不能改变透明度。</tl><tsl /><prv /><sfl>+ [win.setTransparent](../../References/Window.md#winsettransparent) is **deprecated**. You can't change the transparency after window is created.</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+【不最大化]（\/ \/引用\/窗口。MD #事件不最大化）和[离开]（全屏\/ \/引用\/窗口。MD #事件离开全屏）事件`窗口`对象是**被**取代[恢复]（\/ \/引用\/窗口MD #事件还原）。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ [unmaximize](../../References/Window.md#event-unmaximize) and [leave-fullscreen](../../References/Window.md#event-leave-fullscreen) events of `Window` object is **deprecated** and replaced by [restore](../../References/Window.md#event-restore). </sl><tl>+【不最大化]（/ /引用/窗口。MD #事件不最大化）和[离开]（全屏/ /引用/窗口。MD #事件离开全屏）事件`窗口`对象是**被**取代[恢复]（/ /引用/窗口MD #事件还原）。</tl><tsl /><prv /><sfl>+ [unmaximize](../../References/Window.md#event-unmaximize) and [leave-fullscreen](../../References/Window.md#event-leave-fullscreen) events of `Window` object is **deprecated** and replaced by [restore](../../References/Window.md#event-restore). When window is restored from minimized, maximized or fullscreen, `restore` event is triggered instead.</sfl></tu><tu PI="31" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;当窗口最小化最大化或恢复，全屏，`恢复`事件触发而不是。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>When window is restored from minimized, maximized or fullscreen, `restore` event is triggered instead.</sl><tl>当窗口最小化最大化或恢复，全屏，`恢复`事件触发而不是。</tl><tsl /><prv /><sfl>+ [unmaximize](../../References/Window.md#event-unmaximize) and [leave-fullscreen](../../References/Window.md#event-leave-fullscreen) events of `Window` object is **deprecated** and replaced by [restore](../../References/Window.md#event-restore). When window is restored from minimized, maximized or fullscreen, `restore` event is triggered instead.</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+窗口选项`总是顶`和`在所有工作区`可见更名为[ ` always_on_top ` ]（\/ \/引用\/清单格式。MD # always_on_top）和[ ` visible_on_all_workspaces ` ]（\/ \/引用\/清单格式。MD # visible_on_all_workspaces）分别在` JSON `包。或是`窗口参数。open() `。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Window options `always-on-top` and `visible-on-all-workspaces` is renamed to [`always_on_top`](../../References/Manifest Format.md#always_on_top) and [`visible_on_all_workspaces`](../../References/Manifest Format.md#visible_on_all_workspaces) respectively in `package.json` or as argument of `Window.open()`.</sl><tl>+窗口选项`总是顶`和`在所有工作区`可见更名为[ ` always_on_top ` ]（/ /引用/清单格式。MD # always_on_top）和[ ` visible_on_all_workspaces ` ]（/ /引用/清单格式。MD # visible_on_all_workspaces）分别在` JSON `包。或是`窗口参数。open() `。</tl><tsl /><prv /><sfl>+ Window options `always-on-top` and `visible-on-all-workspaces` is renamed to [`always_on_top`](../../References/Manifest Format.md#always_on_top) and [`visible_on_all_workspaces`](../../References/Manifest Format.md#visible_on_all_workspaces) respectively in `package.json` or as argument of `Window.open()`.</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+窗口没有继承` EventEmitter `了，但方法` on() `，` once() `，` removelistener() `和` removealllisteners() `仍然支持。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ Window is not inherited from `EventEmitter` anymore, but the methods `on()`, `once()`, `removeListener()` and `removeAllListeners()` are still supported.</sl><tl>+窗口没有继承` EventEmitter `了，但方法` on() `，` once() `，` removelistener() `和` removealllisteners() `仍然支持。</tl><tsl /><prv /><sfl>+ Window is not inherited from `EventEmitter` anymore, but the methods `on()`, `once()`, `removeListener()` and `removeAllListeners()` are still supported.</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # #屏幕&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>### Screen</sl><tl># # #屏幕</tl><tsl /><prv /><sfl>### Screen</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` ID `通过`添加`，` orderchanged `，` namechanged `，` thumbnailchanged `应注册和使用流ID返回[ ` registerstream（ID）` ]（\/ \/引用\/屏幕。MD # screendesktopcapturemonitorregisterstreamid）之前，通过` getUserMedia `。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ The `id` obtained by `added`, `orderchanged`, `namechanged`, `thumbnailchanged` should be registered and use the stream id returned by [`registerStream(id)`](../../References/Screen.md#screendesktopcapturemonitorregisterstreamid) before passing to `getUserMedia`. </sl><tl>+ ` ID `通过`添加`，` orderchanged `，` namechanged `，` thumbnailchanged `应注册和使用流ID返回[ ` registerstream（ID）` ]（/ /引用/屏幕。MD # screendesktopcapturemonitorregisterstreamid）之前，通过` getUserMedia `。</tl><tsl /><prv /><sfl>+ The `id` obtained by `added`, `orderchanged`, `namechanged`, `thumbnailchanged` should be registered and use the stream id returned by [`registerStream(id)`](../../References/Screen.md#screendesktopcapturemonitorregisterstreamid) before passing to `getUserMedia`. See [Synopsis](../../References/Screen.md#synopsis_1) for the usage.</sfl></tu><tu PI="35" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;看到[内容提要]（\/ \/引用\/屏幕。MD # synopsis_1）的使用。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>See [Synopsis](../../References/Screen.md#synopsis_1) for the usage.</sl><tl>看到[内容提要]（/ /引用/屏幕。MD # synopsis_1）的使用。</tl><tsl /><prv /><sfl>+ The `id` obtained by `added`, `orderchanged`, `namechanged`, `thumbnailchanged` should be registered and use the stream id returned by [`registerStream(id)`](../../References/Screen.md#screendesktopcapturemonitorregisterstreamid) before passing to `getUserMedia`. See [Synopsis](../../References/Screen.md#synopsis_1) for the usage.</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;# # #已知问题&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>### Known issues</sl><tl># # #已知问题</tl><tsl /><prv /><sfl>### Known issues</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+以下窗口选项传递到北窗。open()不是有效的Linux：&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ The following window options passed to nw.Window.open() is not effective on Linux: </sl><tl>+以下窗口选项传递到北窗。open()不是有效的Linux：</tl><tsl /><prv /><sfl>+ The following window options passed to nw.Window.open() is not effective on Linux: `min_width`, `min_height`, `max_width`, `max_height`, `resizable` for now; try to set them in the callback.</sfl></tu><tu PI="37" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;` min_width `，` min_height `，` max_width `，` max_height `，`可调整大小的`现在；&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>`min_width`, `min_height`, `max_width`, `max_height`, `resizable` for now; </sl><tl>` min_width `，` min_height `，` max_width `，` max_height `，`可调整大小的`现在；</tl><tsl /><prv /><sfl>+ The following window options passed to nw.Window.open() is not effective on Linux: `min_width`, `min_height`, `max_width`, `max_height`, `resizable` for now; try to set them in the callback.</sfl></tu><tu PI="37" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;尝试在回调中设置它们。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>try to set them in the callback.</sl><tl>尝试在回调中设置它们。</tl><tsl /><prv /><sfl>+ The following window options passed to nw.Window.open() is not effective on Linux: `min_width`, `min_height`, `max_width`, `max_height`, `resizable` for now; try to set them in the callback.</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` NW。窗口。得到（window_object）`未正常工作传递参数时；&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `nw.Window.get(window_object)` is not working as expected when passing the argument; </sl><tl>+ ` NW。窗口。得到（window_object）`未正常工作传递参数时；</tl><tsl /><prv /><sfl>+ `nw.Window.get(window_object)` is not working as expected when passing the argument; use `window_object.nw.Window.get()` as a workaround.</sfl></tu><tu PI="38" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;使用` window_object。北窗。get() `作为一种解决方法。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>use `window_object.nw.Window.get()` as a workaround.</sl><tl>使用` window_object。北窗。get() `作为一种解决方法。</tl><tsl /><prv /><sfl>+ `nw.Window.get(window_object)` is not working as expected when passing the argument; use `window_object.nw.Window.get()` as a workaround.</sfl></tu><tu PI="39" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` NW。窗口。reloaddev() `不支持我们&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `nw.Window.reloadDev()` is not supported for now</sl><tl>+ ` NW。窗口。reloaddev() `不支持我们</tl><tsl /><prv /><sfl>+ `nw.Window.reloadDev()` is not supported for now</sfl></tu><tu PI="40" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+关闭的事件的净重：&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `close` event of `nw.Window`: </sl><tl>+关闭的事件的净重：</tl><tsl /><prv /><sfl>+ `close` event of `nw.Window`: &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt; does not pass `true` as the first argument to the event.</sfl></tu><tu PI="40" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;&lt; &gt;与大骨节病# 8984；&lt; &gt; + &lt; \/大骨节病大骨节病&gt;问&lt; \/大骨节病&gt;不通过`真`作为第一个参数的事件。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>&lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt; does not pass `true` as the first argument to the event.</sl><tl>&lt; &gt;与大骨节病# 8984；&lt; &gt; + &lt; /大骨节病大骨节病&gt;问&lt; /大骨节病&gt;不通过`真`作为第一个参数的事件。</tl><tsl /><prv /><sfl>+ `close` event of `nw.Window`: &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt; does not pass `true` as the first argument to the event.</sfl></tu><tu PI="41" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+关闭的事件的净重：&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `closed` event of `nw.Window`: </sl><tl>+关闭的事件的净重：</tl><tsl /><prv /><sfl>+ `closed` event of `nw.Window`: `App.quit()` doesn't trigger this event.</sfl></tu><tu PI="41" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;` APP。quit() `不会触发此事件。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>`App.quit()` doesn't trigger this event.</sl><tl>` APP。quit() `不会触发此事件。</tl><tsl /><prv /><sfl>+ `closed` event of `nw.Window`: `App.quit()` doesn't trigger this event.</sfl></tu><tu PI="42" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ `工具关闭`事件向窗口不支持我们。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `devtools-closed` event of nw.Window is not supported for now.</sl><tl>+ `工具关闭`事件向窗口不支持我们。</tl><tsl /><prv /><sfl>+ `devtools-closed` event of nw.Window is not supported for now.</sfl></tu><tu PI="43" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` as_desktop `选项不支持我们&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `as_desktop` option is not supported for now</sl><tl>+ ` as_desktop `选项不支持我们</tl><tsl /><prv /><sfl>+ `as_desktop` option is not supported for now</sfl></tu><tu PI="44" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` WebKit。{ } | | java插件页面缓存`选项`包。JSON `不支持我们：&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `webkit.{plugin|java|page-cache}` option in `package.json` is not supported for now: </sl><tl>+ ` WebKit。{ } | | java插件页面缓存`选项`包。JSON `不支持我们：</tl><tsl /><prv /><sfl>+ `webkit.{plugin|java|page-cache}` option in `package.json` is not supported for now: plugins are enabled by default.</sfl></tu><tu PI="44" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;默认启用插件。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>plugins are enabled by default.</sl><tl>默认启用插件。</tl><tsl /><prv /><sfl>+ `webkit.{plugin|java|page-cache}` option in `package.json` is not supported for now: plugins are enabled by default.</sfl></tu><tu PI="45" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` nwuseragent `属性` &lt; iframe &gt; `不支持我们。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `nwUserAgent` attribute of `&lt;iframe&gt;` is not supported for now.</sl><tl>+ ` nwuseragent `属性` &lt; iframe &gt; `不支持我们。</tl><tsl /><prv /><sfl>+ `nwUserAgent` attribute of `&lt;iframe&gt;` is not supported for now.</sfl></tu><tu PI="46" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+数据路径命令行参数不支持现在。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `--data-path` command line argument is not supported for now.</sl><tl>+数据路径命令行参数不支持现在。</tl><tsl /><prv /><sfl>+ `--data-path` command line argument is not supported for now.</sfl></tu><tu PI="47" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ `提示` ` MenuItem的`不支持我们。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `tooltip` of `MenuItem` is not supported for now.</sl><tl>+ `提示` ` MenuItem的`不支持我们。</tl><tsl /><prv /><sfl>+ `tooltip` of `MenuItem` is not supported for now.</sfl></tu><tu PI="48" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` NW。应用程序。fullargv `不支持我们。&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `nw.App.fullArgv` is not supported for now.</sl><tl>+ ` NW。应用程序。fullargv `不支持我们。</tl><tsl /><prv /><sfl>+ `nw.App.fullArgv` is not supported for now.</sfl></tu><tu PI="49" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;+ ` NW。应用程序不支持。setcrashdumpdir() `；&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>+ `nw.App.setCrashDumpDir()` is not supported; </sl><tl>+ ` NW。应用程序不支持。setcrashdumpdir() `；</tl><tsl /><prv /><sfl>+ `nw.App.setCrashDumpDir()` is not supported; crash dump is stored in `app-data-path/Crash Reports`</sfl></tu><tu PI="49" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="{&quot;ErrorInfo&quot;:&quot;&quot;,&quot;ErrorStatus&quot;:&quot;&quot;,&quot;Source&quot;:&quot;MT&quot;,&quot;SourceWord&quot;:&quot;崩溃转储存储在应用程序数据路径\/崩溃报告&quot;,&quot;TranStatus&quot;:&quot;草稿&quot;}" StateTranslation="False"><sl>crash dump is stored in `app-data-path/Crash Reports`</sl><tl>崩溃转储存储在应用程序数据路径/崩溃报告</tl><tsl /><prv /><sfl>+ `nw.App.setCrashDumpDir()` is not supported; crash dump is stored in `app-data-path/Crash Reports`</sfl></tu></body></Transmate>