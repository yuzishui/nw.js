<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/9 20:41:27" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\Window\Window.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="3154" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\FileInformation.ueprj" CustomTermPath="" PreviewPath="D:\workspace_github\nw.js\nw.js\Window\WindowPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl># Window {: </sl><tl /><tsl /><prv /><sfl># Window {: .doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>.doctitle}</sl><tl /><tsl /><prv /><sfl># Window {: .doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>---</sl><tl /><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[TOC]</sl><tl /><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`Window` is a wrapper of the DOM's `window` object. </sl><tl /><tsl /><prv /><sfl>`Window` is a wrapper of the DOM's `window` object. It has extended operations and can receive various window events.</sfl></tu><tu PI="4" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It has extended operations and can receive various window events.</sl><tl /><tsl /><prv /><sfl>`Window` is a wrapper of the DOM's `window` object. It has extended operations and can receive various window events.</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Every `Window` is an instance of the EventEmitter class, and you're able to use `Window.on(...)` to respond to native window's events.</sl><tl /><tsl /><prv /><sfl>Every `Window` is an instance of the EventEmitter class, and you're able to use `Window.on(...)` to respond to native window's events.</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Synopsis</sl><tl /><tsl /><prv /><sfl>## Synopsis</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Get the current window</sl><tl /><tsl /><prv /><sfl>// Get the current window</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var win = nw.Window.get();</sl><tl /><tsl /><prv /><sfl>var win = nw.Window.get();</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Listen to the minimize event</sl><tl /><tsl /><prv /><sfl>// Listen to the minimize event</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.on('minimize', function() {</sl><tl /><tsl /><prv /><sfl>win.on('minimize', function() {</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  console.log('Window is minimized');</sl><tl /><tsl /><prv /><sfl>  console.log('Window is minimized');</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Minimize the window</sl><tl /><tsl /><prv /><sfl>// Minimize the window</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.minimize();</sl><tl /><tsl /><prv /><sfl>win.minimize();</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Unlisten the minimize event</sl><tl /><tsl /><prv /><sfl>// Unlisten the minimize event</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.removeAllListeners('minimize');</sl><tl /><tsl /><prv /><sfl>win.removeAllListeners('minimize');</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Create a new window and get it</sl><tl /><tsl /><prv /><sfl>// Create a new window and get it</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.Window.open('https://github.com', {}, function(new_win) {</sl><tl /><tsl /><prv /><sfl>nw.Window.open('https://github.com', {}, function(new_win) {</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // And listen to new window's focus event</sl><tl /><tsl /><prv /><sfl>  // And listen to new window's focus event</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  new_win.on('focus', function() {</sl><tl /><tsl /><prv /><sfl>  new_win.on('focus', function() {</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    console.log('New window is focused');</sl><tl /><tsl /><prv /><sfl>    console.log('New window is focused');</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  });</sl><tl /><tsl /><prv /><sfl>  });</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Window.get([window_object])</sl><tl /><tsl /><prv /><sfl>## Window.get([window_object])</sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `window_object` `{DOM Window}` _Optional_ is the DOM window</sl><tl /><tsl /><prv /><sfl>* `window_object` `{DOM Window}` _Optional_ is the DOM window</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Returns `{Window}` the native `Window` object</sl><tl /><tsl /><prv /><sfl>* Returns `{Window}` the native `Window` object</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If `window_object` is not specifed, then return current window's `Window` object, otherwise return `window_object`'s `Window` object.</sl><tl /><tsl /><prv /><sfl>If `window_object` is not specifed, then return current window's `Window` object, otherwise return `window_object`'s `Window` object.</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Get the current window</sl><tl /><tsl /><prv /><sfl>// Get the current window</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var win = nw.Window.get();</sl><tl /><tsl /><prv /><sfl>var win = nw.Window.get();</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Create a new window and get it</sl><tl /><tsl /><prv /><sfl>// Create a new window and get it</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.Window.open('https://github.com/nwjs/nw.js', {}, function(new_win) {</sl><tl /><tsl /><prv /><sfl>nw.Window.open('https://github.com/nwjs/nw.js', {}, function(new_win) {</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // do something with the newly created window</sl><tl /><tsl /><prv /><sfl>  // do something with the newly created window</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Window.open(url, [options], [callback])</sl><tl /><tsl /><prv /><sfl>## Window.open(url, [options], [callback])</sfl></tu><tu PI="39" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Behavior Changed"</sfl></tu><tu PI="39" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Behavior Changed"</sl><tl /><tsl /><prv /><sfl>!!! warning "Behavior Changed"</sfl></tu><tu PI="40" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    The behavior of the function is changed since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    The behavior of the function is changed since 0.13.0. Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="40" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    The behavior of the function is changed since 0.13.0. Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="41" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `url` `{String}` URL to be loaded in the opened window</sl><tl /><tsl /><prv /><sfl>* `url` `{String}` URL to be loaded in the opened window</sfl></tu><tu PI="42" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `options` `{Object}` _Optional_ see [Window subfields](Manifest Format.md#window-subfields) in manifest format. </sl><tl /><tsl /><prv /><sfl>* `options` `{Object}` _Optional_ see [Window subfields](Manifest Format.md#window-subfields) in manifest format. And following extra fields can also be used in options.</sfl></tu><tu PI="42" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And following extra fields can also be used in options.</sl><tl /><tsl /><prv /><sfl>* `options` `{Object}` _Optional_ see [Window subfields](Manifest Format.md#window-subfields) in manifest format. And following extra fields can also be used in options.</sfl></tu><tu PI="43" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `new_instance` `{Boolean}` _Optional_ whether to open a new window in a separate render process.</sl><tl /><tsl /><prv /><sfl>    - `new_instance` `{Boolean}` _Optional_ whether to open a new window in a separate render process.</sfl></tu><tu PI="44" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `inject_js_start` `{String}` _Optional_ the script to be injected before document loaded. </sl><tl /><tsl /><prv /><sfl>    - `inject_js_start` `{String}` _Optional_ the script to be injected before document loaded. See [Manifest format](Manifest Format.md#inject_js_start)</sfl></tu><tu PI="44" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Manifest format](Manifest Format.md#inject_js_start)</sl><tl /><tsl /><prv /><sfl>    - `inject_js_start` `{String}` _Optional_ the script to be injected before document loaded. See [Manifest format](Manifest Format.md#inject_js_start)</sfl></tu><tu PI="45" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `inject_js_end` `{String}` _Optional_ the script to be injected before document unloaded. </sl><tl /><tsl /><prv /><sfl>    - `inject_js_end` `{String}` _Optional_ the script to be injected before document unloaded. See [Manifest format](Manifest Format.md#inject_js_end)</sfl></tu><tu PI="45" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Manifest format](Manifest Format.md#inject_js_end)</sl><tl /><tsl /><prv /><sfl>    - `inject_js_end` `{String}` _Optional_ the script to be injected before document unloaded. See [Manifest format](Manifest Format.md#inject_js_end)</sfl></tu><tu PI="46" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `id` `{String}` _Optional_ the ID used to identify the window. </sl><tl /><tsl /><prv /><sfl>    - `id` `{String}` _Optional_ the ID used to identify the window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. [See also the Chrome App documentation](https://developer.chrome.com/apps/app_window#type-CreateWindowOptions)</sfl></tu><tu PI="46" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. </sl><tl /><tsl /><prv /><sfl>    - `id` `{String}` _Optional_ the ID used to identify the window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. [See also the Chrome App documentation](https://developer.chrome.com/apps/app_window#type-CreateWindowOptions)</sfl></tu><tu PI="46" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[See also the Chrome App documentation](https://developer.chrome.com/apps/app_window#type-CreateWindowOptions)</sl><tl /><tsl /><prv /><sfl>    - `id` `{String}` _Optional_ the ID used to identify the window. This will be used to remember the size and position of the window and restore that geometry when a window with the same id is later opened. [See also the Chrome App documentation](https://developer.chrome.com/apps/app_window#type-CreateWindowOptions)</sfl></tu><tu PI="47" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `callback(win)` `{Function}` _Optional_ callback when with the opened native `Window` object</sl><tl /><tsl /><prv /><sfl>* `callback(win)` `{Function}` _Optional_ callback when with the opened native `Window` object</sfl></tu><tu PI="48" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Open a new window and load `url` in it.</sl><tl /><tsl /><prv /><sfl>Open a new window and load `url` in it.</sfl></tu><tu PI="49" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="49" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="50" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    You should wait for the Window's `loaded` event before interacting with any of its components.</sl><tl /><tsl /><prv /><sfl>    You should wait for the Window's `loaded` event before interacting with any of its components.</sfl></tu><tu PI="51" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Focus"</sfl></tu><tu PI="51" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Focus"</sl><tl /><tsl /><prv /><sfl>!!! note "Focus"</sfl></tu><tu PI="52" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    The opened window is not focused by default. </sl><tl /><tsl /><prv /><sfl>    The opened window is not focused by default. If you want it to be focused by default, you can set `focus` to `true` in `options`.</sfl></tu><tu PI="52" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If you want it to be focused by default, you can set `focus` to `true` in `options`.</sl><tl /><tsl /><prv /><sfl>    The opened window is not focused by default. If you want it to be focused by default, you can set `focus` to `true` in `options`.</sfl></tu><tu PI="53" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.window</sl><tl /><tsl /><prv /><sfl>## win.window</sfl></tu><tu PI="54" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get the corresponding DOM window object of the native window.</sl><tl /><tsl /><prv /><sfl>Get the corresponding DOM window object of the native window.</sfl></tu><tu PI="55" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.x</sl><tl /><tsl /><prv /><sfl>## win.x</sfl></tu><tu PI="56" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.y</sl><tl /><tsl /><prv /><sfl>## win.y</sfl></tu><tu PI="57" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get or set left/top offset from window to screen.</sl><tl /><tsl /><prv /><sfl>Get or set left/top offset from window to screen.</sfl></tu><tu PI="58" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.width</sl><tl /><tsl /><prv /><sfl>## win.width</sfl></tu><tu PI="59" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.height</sl><tl /><tsl /><prv /><sfl>## win.height</sfl></tu><tu PI="60" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get or set window's size.</sl><tl /><tsl /><prv /><sfl>Get or set window's size.</sfl></tu><tu PI="61" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.title</sl><tl /><tsl /><prv /><sfl>## win.title</sfl></tu><tu PI="62" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get or set window's title.</sl><tl /><tsl /><prv /><sfl>Get or set window's title.</sfl></tu><tu PI="63" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.menu</sl><tl /><tsl /><prv /><sfl>## win.menu</sfl></tu><tu PI="64" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get or set window's menubar. </sl><tl /><tsl /><prv /><sfl>Get or set window's menubar. Set with a Menu with type `menubar`. See [Menu](Menu.md).</sfl></tu><tu PI="64" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Set with a Menu with type `menubar`. </sl><tl /><tsl /><prv /><sfl>Get or set window's menubar. Set with a Menu with type `menubar`. See [Menu](Menu.md).</sfl></tu><tu PI="64" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Menu](Menu.md).</sl><tl /><tsl /><prv /><sfl>Get or set window's menubar. Set with a Menu with type `menubar`. See [Menu](Menu.md).</sfl></tu><tu PI="65" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.isFullscreen</sl><tl /><tsl /><prv /><sfl>## win.isFullscreen</sfl></tu><tu PI="66" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get whether we're in fullscreen mode.</sl><tl /><tsl /><prv /><sfl>Get whether we're in fullscreen mode.</sfl></tu><tu PI="67" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.isTransparent </sl><tl /><tsl /><prv /><sfl>## win.isTransparent </sfl></tu><tu PI="68" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get whether transparency is turned on</sl><tl /><tsl /><prv /><sfl>Get whether transparency is turned on</sfl></tu><tu PI="69" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.isKioskMode</sl><tl /><tsl /><prv /><sfl>## win.isKioskMode</sfl></tu><tu PI="70" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get whether we're in kiosk mode.</sl><tl /><tsl /><prv /><sfl>Get whether we're in kiosk mode.</sfl></tu><tu PI="71" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.zoomLevel</sl><tl /><tsl /><prv /><sfl>## win.zoomLevel</sfl></tu><tu PI="72" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Get or set the page zoom. </sl><tl /><tsl /><prv /><sfl>Get or set the page zoom. `0` for normal size; positive value for zooming in; negative value for zooming out.</sfl></tu><tu PI="72" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`0` for normal size; </sl><tl /><tsl /><prv /><sfl>Get or set the page zoom. `0` for normal size; positive value for zooming in; negative value for zooming out.</sfl></tu><tu PI="72" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>positive value for zooming in; </sl><tl /><tsl /><prv /><sfl>Get or set the page zoom. `0` for normal size; positive value for zooming in; negative value for zooming out.</sfl></tu><tu PI="72" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>negative value for zooming out.</sl><tl /><tsl /><prv /><sfl>Get or set the page zoom. `0` for normal size; positive value for zooming in; negative value for zooming out.</sfl></tu><tu PI="73" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.cookies.*</sl><tl /><tsl /><prv /><sfl>## win.cookies.*</sfl></tu><tu PI="74" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>This includes multiple functions to manipulate the cookies. </sl><tl /><tsl /><prv /><sfl>This includes multiple functions to manipulate the cookies. The API is defined in the same way as [Chrome Extensions'](http://developer.chrome.com/extensions/cookies.html). NW.js supports the `get`, `getAll`, `remove` and `set` methods; `onChanged` event (supporting both `addListener` and `removeListener` function on this event).</sfl></tu><tu PI="74" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The API is defined in the same way as [Chrome Extensions'](http://developer.chrome.com/extensions/cookies.html). </sl><tl /><tsl /><prv /><sfl>This includes multiple functions to manipulate the cookies. The API is defined in the same way as [Chrome Extensions'](http://developer.chrome.com/extensions/cookies.html). NW.js supports the `get`, `getAll`, `remove` and `set` methods; `onChanged` event (supporting both `addListener` and `removeListener` function on this event).</sfl></tu><tu PI="74" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>NW.js supports the `get`, `getAll`, `remove` and `set` methods; </sl><tl /><tsl /><prv /><sfl>This includes multiple functions to manipulate the cookies. The API is defined in the same way as [Chrome Extensions'](http://developer.chrome.com/extensions/cookies.html). NW.js supports the `get`, `getAll`, `remove` and `set` methods; `onChanged` event (supporting both `addListener` and `removeListener` function on this event).</sfl></tu><tu PI="74" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`onChanged` event (supporting both `addListener` and `removeListener` function on this event).</sl><tl /><tsl /><prv /><sfl>This includes multiple functions to manipulate the cookies. The API is defined in the same way as [Chrome Extensions'](http://developer.chrome.com/extensions/cookies.html). NW.js supports the `get`, `getAll`, `remove` and `set` methods; `onChanged` event (supporting both `addListener` and `removeListener` function on this event).</sfl></tu><tu PI="75" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And anything related to `CookieStore` in the Chrome extension API is not supported, because there is only one global cookie store in NW.js apps.</sl><tl /><tsl /><prv /><sfl>And anything related to `CookieStore` in the Chrome extension API is not supported, because there is only one global cookie store in NW.js apps.</sfl></tu><tu PI="76" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.moveTo(x, y)</sl><tl /><tsl /><prv /><sfl>## win.moveTo(x, y)</sfl></tu><tu PI="77" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `x` `{Integer}` offset to the left of the screen</sl><tl /><tsl /><prv /><sfl>* `x` `{Integer}` offset to the left of the screen</sfl></tu><tu PI="78" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `y` `{Integer}` offset to the top of the screen</sl><tl /><tsl /><prv /><sfl>* `y` `{Integer}` offset to the top of the screen</sfl></tu><tu PI="79" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Moves a window's left and top edge to the specified coordinates.</sl><tl /><tsl /><prv /><sfl>Moves a window's left and top edge to the specified coordinates.</sfl></tu><tu PI="80" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.moveBy(x, y)</sl><tl /><tsl /><prv /><sfl>## win.moveBy(x, y)</sfl></tu><tu PI="81" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `x` `{Integer}` horizontal offset</sl><tl /><tsl /><prv /><sfl>* `x` `{Integer}` horizontal offset</sfl></tu><tu PI="82" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `y` `{Integer}` vertical offset</sl><tl /><tsl /><prv /><sfl>* `y` `{Integer}` vertical offset</sfl></tu><tu PI="83" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Moves a window a specified number of pixels relative to its current coordinates.</sl><tl /><tsl /><prv /><sfl>Moves a window a specified number of pixels relative to its current coordinates.</sfl></tu><tu PI="84" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.resizeTo(width, height)</sl><tl /><tsl /><prv /><sfl>## win.resizeTo(width, height)</sfl></tu><tu PI="85" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `width` `{Integer}` the width of the window</sl><tl /><tsl /><prv /><sfl>* `width` `{Integer}` the width of the window</sfl></tu><tu PI="86" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `height` `{Integer}` the height of the window</sl><tl /><tsl /><prv /><sfl>* `height` `{Integer}` the height of the window</sfl></tu><tu PI="87" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Resizes a window to the specified `width` and `height`.</sl><tl /><tsl /><prv /><sfl>Resizes a window to the specified `width` and `height`.</sfl></tu><tu PI="88" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.resizeBy(width, height)</sl><tl /><tsl /><prv /><sfl>## win.resizeBy(width, height)</sfl></tu><tu PI="89" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `width` `{Integer}` the offset width of the window</sl><tl /><tsl /><prv /><sfl>* `width` `{Integer}` the offset width of the window</sfl></tu><tu PI="90" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `height` `{Integer}` the offset height of the window</sl><tl /><tsl /><prv /><sfl>* `height` `{Integer}` the offset height of the window</sfl></tu><tu PI="91" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Resizes a window by the specified amount.</sl><tl /><tsl /><prv /><sfl>Resizes a window by the specified amount.</sfl></tu><tu PI="92" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.focus()</sl><tl /><tsl /><prv /><sfl>## win.focus()</sfl></tu><tu PI="93" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Focus on the window.</sl><tl /><tsl /><prv /><sfl>Focus on the window.</sfl></tu><tu PI="94" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.blur()</sl><tl /><tsl /><prv /><sfl>## win.blur()</sfl></tu><tu PI="95" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Move focus away. </sl><tl /><tsl /><prv /><sfl>Move focus away. Usually it will move focus to other windows of your app, since on some platforms there is no concept of blur.</sfl></tu><tu PI="95" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Usually it will move focus to other windows of your app, since on some platforms there is no concept of blur.</sl><tl /><tsl /><prv /><sfl>Move focus away. Usually it will move focus to other windows of your app, since on some platforms there is no concept of blur.</sfl></tu><tu PI="96" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.show([is_show])</sl><tl /><tsl /><prv /><sfl>## win.show([is_show])</sfl></tu><tu PI="97" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `is_show` `{Boolean}` _Optional_ specify whether the window should be shown or hidden. </sl><tl /><tsl /><prv /><sfl>* `is_show` `{Boolean}` _Optional_ specify whether the window should be shown or hidden. It's set to `true` by default.</sfl></tu><tu PI="97" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It's set to `true` by default.</sl><tl /><tsl /><prv /><sfl>* `is_show` `{Boolean}` _Optional_ specify whether the window should be shown or hidden. It's set to `true` by default.</sfl></tu><tu PI="98" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Show the window if it's not shown.</sl><tl /><tsl /><prv /><sfl>Show the window if it's not shown.</sfl></tu><tu PI="99" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`show(false)` has the same effect with `hide()`.</sl><tl /><tsl /><prv /><sfl>`show(false)` has the same effect with `hide()`.</sfl></tu><tu PI="100" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Focus"</sfl></tu><tu PI="100" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Focus"</sl><tl /><tsl /><prv /><sfl>!!! note "Focus"</sfl></tu><tu PI="101" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    `show` will not focus on the window on some platforms, so you need to call `focus` if you want to.</sl><tl /><tsl /><prv /><sfl>    `show` will not focus on the window on some platforms, so you need to call `focus` if you want to.</sfl></tu><tu PI="102" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.hide()</sl><tl /><tsl /><prv /><sfl>## win.hide()</sfl></tu><tu PI="103" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Hide the window. </sl><tl /><tsl /><prv /><sfl>Hide the window. User will not be able to find the window once it's hidden.</sfl></tu><tu PI="103" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>User will not be able to find the window once it's hidden.</sl><tl /><tsl /><prv /><sfl>Hide the window. User will not be able to find the window once it's hidden.</sfl></tu><tu PI="104" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.close([force])</sl><tl /><tsl /><prv /><sfl>## win.close([force])</sfl></tu><tu PI="105" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `force` `{Boolean}` specify whether to close the window forcely and bypass `close` event.</sl><tl /><tsl /><prv /><sfl>* `force` `{Boolean}` specify whether to close the window forcely and bypass `close` event.</sfl></tu><tu PI="106" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Close current window. </sl><tl /><tsl /><prv /><sfl>Close current window. And you can prevent the closing by listening to the `close` event. If `force` is specified and equals to `true`, then the `close` event will be ignored.</sfl></tu><tu PI="106" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And you can prevent the closing by listening to the `close` event. </sl><tl /><tsl /><prv /><sfl>Close current window. And you can prevent the closing by listening to the `close` event. If `force` is specified and equals to `true`, then the `close` event will be ignored.</sfl></tu><tu PI="106" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If `force` is specified and equals to `true`, then the `close` event will be ignored.</sl><tl /><tsl /><prv /><sfl>Close current window. And you can prevent the closing by listening to the `close` event. If `force` is specified and equals to `true`, then the `close` event will be ignored.</sfl></tu><tu PI="107" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Usually you would like to listen to the `close` event and do some shutdown work and then do a `close(true)` to really close the window.</sl><tl /><tsl /><prv /><sfl>Usually you would like to listen to the `close` event and do some shutdown work and then do a `close(true)` to really close the window.</sfl></tu><tu PI="108" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="109" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.on('close', function() {</sl><tl /><tsl /><prv /><sfl>win.on('close', function() {</sfl></tu><tu PI="110" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  this.hide(); </sl><tl /><tsl /><prv /><sfl>  this.hide(); // Pretend to be closed already</sfl></tu><tu PI="110" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Pretend to be closed already</sl><tl /><tsl /><prv /><sfl>  this.hide(); // Pretend to be closed already</sfl></tu><tu PI="111" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  console.log("We're closing...");</sl><tl /><tsl /><prv /><sfl>  console.log("We're closing...");</sfl></tu><tu PI="112" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  this.close(true); </sl><tl /><tsl /><prv /><sfl>  this.close(true); // then close it forcely</sfl></tu><tu PI="112" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// then close it forcely</sl><tl /><tsl /><prv /><sfl>  this.close(true); // then close it forcely</sfl></tu><tu PI="113" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="114" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.close();</sl><tl /><tsl /><prv /><sfl>win.close();</sfl></tu><tu PI="115" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="116" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.reload()</sl><tl /><tsl /><prv /><sfl>## win.reload()</sfl></tu><tu PI="117" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Reloads the current window.</sl><tl /><tsl /><prv /><sfl>Reloads the current window.</sfl></tu><tu PI="118" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.reloadDev()</sl><tl /><tsl /><prv /><sfl>## win.reloadDev()</sfl></tu><tu PI="119" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Reloads the current page by starting a new renderer process from scratch.</sl><tl /><tsl /><prv /><sfl>Reloads the current page by starting a new renderer process from scratch.</sfl></tu><tu PI="120" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.reloadIgnoringCache()</sl><tl /><tsl /><prv /><sfl>## win.reloadIgnoringCache()</sfl></tu><tu PI="121" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Like `reload()`, but don't use caches (aka "shift-reload").</sl><tl /><tsl /><prv /><sfl>Like `reload()`, but don't use caches (aka "shift-reload").</sfl></tu><tu PI="122" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.maximize()</sl><tl /><tsl /><prv /><sfl>## win.maximize()</sfl></tu><tu PI="123" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Maximize the window on GTK and Windows, and zoom the window on Mac OS X.</sl><tl /><tsl /><prv /><sfl>Maximize the window on GTK and Windows, and zoom the window on Mac OS X.</sfl></tu><tu PI="124" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.unmaximize()</sl><tl /><tsl /><prv /><sfl>## win.unmaximize()</sfl></tu><tu PI="125" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="125" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Deprecated"</sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="126" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This feature is deprecated since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. It's now replaced by [`restore` event](#event-restore). See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="126" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It's now replaced by [`restore` event](#event-restore). </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. It's now replaced by [`restore` event](#event-restore). See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="126" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. It's now replaced by [`restore` event](#event-restore). See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="127" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Unmaximize the window, i.e. the reverse of `maximize()`.</sl><tl /><tsl /><prv /><sfl>Unmaximize the window, i.e. the reverse of `maximize()`.</sfl></tu><tu PI="128" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.minimize()</sl><tl /><tsl /><prv /><sfl>## win.minimize()</sfl></tu><tu PI="129" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Minimize the window to task bar on Windows, iconify the window on GTK, and miniaturize the window on Mac OS X.</sl><tl /><tsl /><prv /><sfl>Minimize the window to task bar on Windows, iconify the window on GTK, and miniaturize the window on Mac OS X.</sfl></tu><tu PI="130" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.restore()</sl><tl /><tsl /><prv /><sfl>## win.restore()</sfl></tu><tu PI="131" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Restore window to previous state after the window is minimized, i.e. the reverse of `minimize()`. </sl><tl /><tsl /><prv /><sfl>Restore window to previous state after the window is minimized, i.e. the reverse of `minimize()`. It's not named `unminimize` since `restore` is used commonly.</sfl></tu><tu PI="131" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It's not named `unminimize` since `restore` is used commonly.</sl><tl /><tsl /><prv /><sfl>Restore window to previous state after the window is minimized, i.e. the reverse of `minimize()`. It's not named `unminimize` since `restore` is used commonly.</sfl></tu><tu PI="132" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.enterFullscreen()</sl><tl /><tsl /><prv /><sfl>## win.enterFullscreen()</sfl></tu><tu PI="133" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Make the window fullscreen.</sl><tl /><tsl /><prv /><sfl>Make the window fullscreen.</sfl></tu><tu PI="134" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="134" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="135" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This function is different with HTML5 FullScreen API, which can make part of the page fullscreen, `Window.enterFullscreen()` will only fullscreen the whole window.</sl><tl /><tsl /><prv /><sfl>    This function is different with HTML5 FullScreen API, which can make part of the page fullscreen, `Window.enterFullscreen()` will only fullscreen the whole window.</sfl></tu><tu PI="136" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.leaveFullscreen()</sl><tl /><tsl /><prv /><sfl>## win.leaveFullscreen()</sfl></tu><tu PI="137" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Leave the fullscreen mode.</sl><tl /><tsl /><prv /><sfl>Leave the fullscreen mode.</sfl></tu><tu PI="138" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.toggleFullscreen()</sl><tl /><tsl /><prv /><sfl>## win.toggleFullscreen()</sfl></tu><tu PI="139" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Toggle the fullscreen mode.</sl><tl /><tsl /><prv /><sfl>Toggle the fullscreen mode.</sfl></tu><tu PI="140" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.enterKioskMode()</sl><tl /><tsl /><prv /><sfl>## win.enterKioskMode()</sfl></tu><tu PI="141" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Enter the Kiosk mode. </sl><tl /><tsl /><prv /><sfl>Enter the Kiosk mode. In Kiosk mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave Kiosk mode. This mode is mainly used for presentation on public displays.</sfl></tu><tu PI="141" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In Kiosk mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave Kiosk mode. </sl><tl /><tsl /><prv /><sfl>Enter the Kiosk mode. In Kiosk mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave Kiosk mode. This mode is mainly used for presentation on public displays.</sfl></tu><tu PI="141" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>This mode is mainly used for presentation on public displays.</sl><tl /><tsl /><prv /><sfl>Enter the Kiosk mode. In Kiosk mode, the app will be fullscreen and try to prevent users from leaving the app, so you should remember to provide a way in app to leave Kiosk mode. This mode is mainly used for presentation on public displays.</sfl></tu><tu PI="142" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.leaveKioskMode()</sl><tl /><tsl /><prv /><sfl>## win.leaveKioskMode()</sfl></tu><tu PI="143" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Leave the Kiosk mode.</sl><tl /><tsl /><prv /><sfl>Leave the Kiosk mode.</sfl></tu><tu PI="144" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.toggleKioskMode()</sl><tl /><tsl /><prv /><sfl>## win.toggleKioskMode()</sfl></tu><tu PI="145" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Toggle the kiosk mode.</sl><tl /><tsl /><prv /><sfl>Toggle the kiosk mode.</sfl></tu><tu PI="146" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setTransparent(transparent)</sl><tl /><tsl /><prv /><sfl>## win.setTransparent(transparent)</sfl></tu><tu PI="147" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="147" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Deprecated"</sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="148" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This feature is deprecated since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="148" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="149" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `transparent` `{Boolean}` whether to set the window to be transparent</sl><tl /><tsl /><prv /><sfl>* `transparent` `{Boolean}` whether to set the window to be transparent</sfl></tu><tu PI="150" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Turn on/off the transparency support. </sl><tl /><tsl /><prv /><sfl>Turn on/off the transparency support. See more info on [Transparent Window](../For Users/Advanced/Transparent Window.md).</sfl></tu><tu PI="150" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See more info on [Transparent Window](../For Users/Advanced/Transparent Window.md).</sl><tl /><tsl /><prv /><sfl>Turn on/off the transparency support. See more info on [Transparent Window](../For Users/Advanced/Transparent Window.md).</sfl></tu><tu PI="151" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.showDevTools([iframe], [callback])</sl><tl /><tsl /><prv /><sfl>## win.showDevTools([iframe], [callback])</sfl></tu><tu PI="152" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="152" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="153" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This API is only available on SDK build flavor.</sl><tl /><tsl /><prv /><sfl>    This API is only available on SDK build flavor.</sfl></tu><tu PI="154" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Behavior Changed"</sfl></tu><tu PI="154" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Behavior Changed"</sl><tl /><tsl /><prv /><sfl>!!! warning "Behavior Changed"</sfl></tu><tu PI="155" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    The behavior of the function is changed since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    The behavior of the function is changed since 0.13.0. Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="155" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    The behavior of the function is changed since 0.13.0. Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="156" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `iframe` `{String} or {HTMLIFrameElement}` _Optional_ the id or the element of the `&lt;iframe&gt;` to be jailed on. </sl><tl /><tsl /><prv /><sfl>* `iframe` `{String} or {HTMLIFrameElement}` _Optional_ the id or the element of the `&lt;iframe&gt;` to be jailed on. By default, the DevTools is shown for entire window.</sfl></tu><tu PI="156" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>By default, the DevTools is shown for entire window.</sl><tl /><tsl /><prv /><sfl>* `iframe` `{String} or {HTMLIFrameElement}` _Optional_ the id or the element of the `&lt;iframe&gt;` to be jailed on. By default, the DevTools is shown for entire window.</sfl></tu><tu PI="157" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `callback(dev_win)` `{Function}` callback with the native window of the DevTools window.</sl><tl /><tsl /><prv /><sfl>* `callback(dev_win)` `{Function}` callback with the native window of the DevTools window.</sfl></tu><tu PI="158" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Open the devtools to inspect the window.</sl><tl /><tsl /><prv /><sfl>Open the devtools to inspect the window.</sfl></tu><tu PI="159" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The optional `iframe` as `String` should be the value of `id` attribute of any `&lt;iframe&gt;` element in the window. </sl><tl /><tsl /><prv /><sfl>The optional `iframe` as `String` should be the value of `id` attribute of any `&lt;iframe&gt;` element in the window. It jails the DevTools to inspect the `&lt;iframe&gt;` only. If it is an empty string, this feature has no effect.</sfl></tu><tu PI="159" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It jails the DevTools to inspect the `&lt;iframe&gt;` only. </sl><tl /><tsl /><prv /><sfl>The optional `iframe` as `String` should be the value of `id` attribute of any `&lt;iframe&gt;` element in the window. It jails the DevTools to inspect the `&lt;iframe&gt;` only. If it is an empty string, this feature has no effect.</sfl></tu><tu PI="159" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If it is an empty string, this feature has no effect.</sl><tl /><tsl /><prv /><sfl>The optional `iframe` as `String` should be the value of `id` attribute of any `&lt;iframe&gt;` element in the window. It jails the DevTools to inspect the `&lt;iframe&gt;` only. If it is an empty string, this feature has no effect.</sfl></tu><tu PI="160" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The optional `iframe` as `HTMLIFrameElement` should be the iframe object. </sl><tl /><tsl /><prv /><sfl>The optional `iframe` as `HTMLIFrameElement` should be the iframe object. And it serves the same purpose with the `id` argument.</sfl></tu><tu PI="160" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And it serves the same purpose with the `id` argument.</sl><tl /><tsl /><prv /><sfl>The optional `iframe` as `HTMLIFrameElement` should be the iframe object. And it serves the same purpose with the `id` argument.</sfl></tu><tu PI="161" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>This function returns a `Window` object via the callback. </sl><tl /><tsl /><prv /><sfl>This function returns a `Window` object via the callback. You can use any properties and methods of `Window` except the events.</sfl></tu><tu PI="161" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You can use any properties and methods of `Window` except the events.</sl><tl /><tsl /><prv /><sfl>This function returns a `Window` object via the callback. You can use any properties and methods of `Window` except the events.</sfl></tu><tu PI="162" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See also in [webview reference](webview Tag.md) on how to open DevTools for webview or open DevTools in a webview.</sl><tl /><tsl /><prv /><sfl>See also in [webview reference](webview Tag.md) on how to open DevTools for webview or open DevTools in a webview.</sfl></tu><tu PI="163" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.closeDevTools()</sl><tl /><tsl /><prv /><sfl>## win.closeDevTools()</sfl></tu><tu PI="164" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="164" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="165" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This API is only available on SDK build flavor.</sl><tl /><tsl /><prv /><sfl>    This API is only available on SDK build flavor.</sfl></tu><tu PI="166" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Close the devtools window.</sl><tl /><tsl /><prv /><sfl>Close the devtools window.</sfl></tu><tu PI="167" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.isDevToolsOpen()</sl><tl /><tsl /><prv /><sfl>## win.isDevToolsOpen()</sfl></tu><tu PI="168" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="168" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="169" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This API is only available on SDK build flavor.</sl><tl /><tsl /><prv /><sfl>    This API is only available on SDK build flavor.</sfl></tu><tu PI="170" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Query the status of devtools window.</sl><tl /><tsl /><prv /><sfl>Query the status of devtools window.</sfl></tu><tu PI="171" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See also [`win.showDevTools()`](#winshowdevtoolsiframe-callback).</sl><tl /><tsl /><prv /><sfl>See also [`win.showDevTools()`](#winshowdevtoolsiframe-callback).</sfl></tu><tu PI="172" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setMaximumSize(width, height)</sl><tl /><tsl /><prv /><sfl>## win.setMaximumSize(width, height)</sfl></tu><tu PI="173" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `width` `{Integer}` the maximum width of the window</sl><tl /><tsl /><prv /><sfl>* `width` `{Integer}` the maximum width of the window</sfl></tu><tu PI="174" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `height` `{Integer}` the maximum height of the window</sl><tl /><tsl /><prv /><sfl>* `height` `{Integer}` the maximum height of the window</sfl></tu><tu PI="175" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Set window's maximum size.</sl><tl /><tsl /><prv /><sfl>Set window's maximum size.</sfl></tu><tu PI="176" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setMinimumSize(width, height)</sl><tl /><tsl /><prv /><sfl>## win.setMinimumSize(width, height)</sfl></tu><tu PI="177" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `width` `{Integer}` the minimum width of the window</sl><tl /><tsl /><prv /><sfl>* `width` `{Integer}` the minimum width of the window</sfl></tu><tu PI="178" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `height` `{Integer}` the minimum height of the window</sl><tl /><tsl /><prv /><sfl>* `height` `{Integer}` the minimum height of the window</sfl></tu><tu PI="179" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Set window's minimum size.</sl><tl /><tsl /><prv /><sfl>Set window's minimum size.</sfl></tu><tu PI="180" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setResizable(resizable)</sl><tl /><tsl /><prv /><sfl>## win.setResizable(resizable)</sfl></tu><tu PI="181" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `resizable` `{Boolean}` whether the window can be resized</sl><tl /><tsl /><prv /><sfl>* `resizable` `{Boolean}` whether the window can be resized</sfl></tu><tu PI="182" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Set whether window is resizable.</sl><tl /><tsl /><prv /><sfl>Set whether window is resizable.</sfl></tu><tu PI="183" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setAlwaysOnTop(top)</sl><tl /><tsl /><prv /><sfl>## win.setAlwaysOnTop(top)</sfl></tu><tu PI="184" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `top` `{Boolean}` whether the window should always be on top</sl><tl /><tsl /><prv /><sfl>* `top` `{Boolean}` whether the window should always be on top</sfl></tu><tu PI="185" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Sets the widget to be on top of all other windows in the window system.</sl><tl /><tsl /><prv /><sfl>Sets the widget to be on top of all other windows in the window system.</sfl></tu><tu PI="186" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setVisibleOnAllWorkspaces(visible) (Mac and Linux)</sl><tl /><tsl /><prv /><sfl>## win.setVisibleOnAllWorkspaces(visible) (Mac and Linux)</sfl></tu><tu PI="187" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `top` `{Boolean}` whether the window should be visible on all workspaces</sl><tl /><tsl /><prv /><sfl>* `top` `{Boolean}` whether the window should be visible on all workspaces</sfl></tu><tu PI="188" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For platforms that support multiple workspaces (currently Mac OS X and Linux), this allows NW.js windows to be visible on all workspaces simultaneously.</sl><tl /><tsl /><prv /><sfl>For platforms that support multiple workspaces (currently Mac OS X and Linux), this allows NW.js windows to be visible on all workspaces simultaneously.</sfl></tu><tu PI="189" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.canSetVisibleOnAllWorkspaces() (Mac and Linux)</sl><tl /><tsl /><prv /><sfl>## win.canSetVisibleOnAllWorkspaces() (Mac and Linux)</sfl></tu><tu PI="190" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Returns a a boolean indicating if the platform (currently Mac OS X and Linux) support Window API method `setVisibleOnAllWorkspace(Boolean)`.</sl><tl /><tsl /><prv /><sfl>Returns a a boolean indicating if the platform (currently Mac OS X and Linux) support Window API method `setVisibleOnAllWorkspace(Boolean)`.</sfl></tu><tu PI="191" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setPosition(position)</sl><tl /><tsl /><prv /><sfl>## win.setPosition(position)</sfl></tu><tu PI="192" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `position` `{String}` the position of the window. </sl><tl /><tsl /><prv /><sfl>* `position` `{String}` the position of the window. There are three valid positions: `null` or `center` or `mouse`</sfl></tu><tu PI="192" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>There are three valid positions: </sl><tl /><tsl /><prv /><sfl>* `position` `{String}` the position of the window. There are three valid positions: `null` or `center` or `mouse`</sfl></tu><tu PI="192" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`null` or `center` or `mouse`</sl><tl /><tsl /><prv /><sfl>* `position` `{String}` the position of the window. There are three valid positions: `null` or `center` or `mouse`</sfl></tu><tu PI="193" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Move window to specified position. </sl><tl /><tsl /><prv /><sfl>Move window to specified position. Currently only `center` is supported on all platforms, which will put window in the middle of the screen.</sfl></tu><tu PI="193" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Currently only `center` is supported on all platforms, which will put window in the middle of the screen.</sl><tl /><tsl /><prv /><sfl>Move window to specified position. Currently only `center` is supported on all platforms, which will put window in the middle of the screen.</sfl></tu><tu PI="194" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setShowInTaskbar(show)</sl><tl /><tsl /><prv /><sfl>## win.setShowInTaskbar(show)</sfl></tu><tu PI="195" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `show` `{Boolean}` whether show in task bar</sl><tl /><tsl /><prv /><sfl>* `show` `{Boolean}` whether show in task bar</sfl></tu><tu PI="196" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Control whether to show window in taskbar or dock. </sl><tl /><tsl /><prv /><sfl>Control whether to show window in taskbar or dock. See also `show_in_taskbar` in [Manifest-format](Manifest Format.md#show_in_taskbar).</sfl></tu><tu PI="196" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See also `show_in_taskbar` in [Manifest-format](Manifest Format.md#show_in_taskbar).</sl><tl /><tsl /><prv /><sfl>Control whether to show window in taskbar or dock. See also `show_in_taskbar` in [Manifest-format](Manifest Format.md#show_in_taskbar).</sfl></tu><tu PI="197" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.requestAttention(attension)</sl><tl /><tsl /><prv /><sfl>## win.requestAttention(attension)</sfl></tu><tu PI="198" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `attension` `{Boolean} or {Integer}` If a Boolean, it indicates to request or cancel user's attension. </sl><tl /><tsl /><prv /><sfl>* `attension` `{Boolean} or {Integer}` If a Boolean, it indicates to request or cancel user's attension. If an Integer, it indicates the number of times the window flashes.</sfl></tu><tu PI="198" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If an Integer, it indicates the number of times the window flashes.</sl><tl /><tsl /><prv /><sfl>* `attension` `{Boolean} or {Integer}` If a Boolean, it indicates to request or cancel user's attension. If an Integer, it indicates the number of times the window flashes.</sfl></tu><tu PI="199" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Request the user's attension by making the window flashes in the task bar.</sl><tl /><tsl /><prv /><sfl>Request the user's attension by making the window flashes in the task bar.</sfl></tu><tu PI="200" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Mac"</sfl></tu><tu PI="200" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Mac"</sl><tl /><tsl /><prv /><sfl>!!! note "Mac"</sfl></tu><tu PI="201" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    On Mac, value &lt; 0 will trigger `NSInformationalRequest`, while value &gt; 0 will trigger `NSCriticalRequest`.</sl><tl /><tsl /><prv /><sfl>    On Mac, value &lt; 0 will trigger `NSInformationalRequest`, while value &gt; 0 will trigger `NSCriticalRequest`.</sfl></tu><tu PI="202" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.capturePage(callback [, config ])</sl><tl /><tsl /><prv /><sfl>## win.capturePage(callback [, config ])</sfl></tu><tu PI="203" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `callback` `{Function}` the callback when finished capturing the window</sl><tl /><tsl /><prv /><sfl>* `callback` `{Function}` the callback when finished capturing the window</sfl></tu><tu PI="204" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `config` `{String} or {Object}` _Optional_ if a String, see `config.format` for valid values.</sl><tl /><tsl /><prv /><sfl>* `config` `{String} or {Object}` _Optional_ if a String, see `config.format` for valid values.</sfl></tu><tu PI="205" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `format` `{String}` _optional_ the image format used to generate the image. </sl><tl /><tsl /><prv /><sfl>    - `format` `{String}` _optional_ the image format used to generate the image. It supports two formats: `"png"` and `"jpeg"`. If ignored, it's `"jpeg"` by default.</sfl></tu><tu PI="205" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It supports two formats: </sl><tl /><tsl /><prv /><sfl>    - `format` `{String}` _optional_ the image format used to generate the image. It supports two formats: `"png"` and `"jpeg"`. If ignored, it's `"jpeg"` by default.</sfl></tu><tu PI="205" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`"png"` and `"jpeg"`. </sl><tl /><tsl /><prv /><sfl>    - `format` `{String}` _optional_ the image format used to generate the image. It supports two formats: `"png"` and `"jpeg"`. If ignored, it's `"jpeg"` by default.</sfl></tu><tu PI="205" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If ignored, it's `"jpeg"` by default.</sl><tl /><tsl /><prv /><sfl>    - `format` `{String}` _optional_ the image format used to generate the image. It supports two formats: `"png"` and `"jpeg"`. If ignored, it's `"jpeg"` by default.</sfl></tu><tu PI="206" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - `datatype` `{String}` it supports three types: </sl><tl /><tsl /><prv /><sfl>    - `datatype` `{String}` it supports three types: `"raw"`, `"buffer"` and `"datauri"`. If ignored, it's `"datauri"` by default.</sfl></tu><tu PI="206" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`"raw"`, `"buffer"` and `"datauri"`. </sl><tl /><tsl /><prv /><sfl>    - `datatype` `{String}` it supports three types: `"raw"`, `"buffer"` and `"datauri"`. If ignored, it's `"datauri"` by default.</sfl></tu><tu PI="206" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If ignored, it's `"datauri"` by default.</sl><tl /><tsl /><prv /><sfl>    - `datatype` `{String}` it supports three types: `"raw"`, `"buffer"` and `"datauri"`. If ignored, it's `"datauri"` by default.</sfl></tu><tu PI="207" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Captures the visible area of the window.</sl><tl /><tsl /><prv /><sfl>Captures the visible area of the window.</sfl></tu><tu PI="208" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "`raw` or `datauri`"</sfl></tu><tu PI="208" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "`raw` or `datauri`"</sl><tl /><tsl /><prv /><sfl>!!! note "`raw` or `datauri`"</sfl></tu><tu PI="209" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    The `"raw"` only contains the Base64 encoded image. </sl><tl /><tsl /><prv /><sfl>    The `"raw"` only contains the Base64 encoded image. But `"datauri"` contains the mime type headers as well, and it can be directly assigned to `src` of `Image` to load the image.</sfl></tu><tu PI="209" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>But `"datauri"` contains the mime type headers as well, and it can be directly assigned to `src` of `Image` to load the image.</sl><tl /><tsl /><prv /><sfl>    The `"raw"` only contains the Base64 encoded image. But `"datauri"` contains the mime type headers as well, and it can be directly assigned to `src` of `Image` to load the image.</sfl></tu><tu PI="210" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Example usage:</sl><tl /><tsl /><prv /><sfl>Example usage:</sfl></tu><tu PI="211" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="212" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// png as base64string</sl><tl /><tsl /><prv /><sfl>// png as base64string</sfl></tu><tu PI="213" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.capturePage(function(base64string){</sl><tl /><tsl /><prv /><sfl>win.capturePage(function(base64string){</sfl></tu><tu PI="214" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl> // do something with the base64string</sl><tl /><tsl /><prv /><sfl> // do something with the base64string</sfl></tu><tu PI="215" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}, { format : </sl><tl /><tsl /><prv /><sfl>}, { format : 'png', datatype : 'raw'} );</sfl></tu><tu PI="215" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>'png', datatype : </sl><tl /><tsl /><prv /><sfl>}, { format : 'png', datatype : 'raw'} );</sfl></tu><tu PI="215" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>'raw'} );</sl><tl /><tsl /><prv /><sfl>}, { format : 'png', datatype : 'raw'} );</sfl></tu><tu PI="216" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// png as node buffer</sl><tl /><tsl /><prv /><sfl>// png as node buffer</sfl></tu><tu PI="217" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.capturePage(function(buffer){</sl><tl /><tsl /><prv /><sfl>win.capturePage(function(buffer){</sfl></tu><tu PI="218" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl> // do something with the buffer</sl><tl /><tsl /><prv /><sfl> // do something with the buffer</sfl></tu><tu PI="219" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}, { format : </sl><tl /><tsl /><prv /><sfl>}, { format : 'png', datatype : 'buffer'} );</sfl></tu><tu PI="219" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>'png', datatype : </sl><tl /><tsl /><prv /><sfl>}, { format : 'png', datatype : 'buffer'} );</sfl></tu><tu PI="219" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>'buffer'} );</sl><tl /><tsl /><prv /><sfl>}, { format : 'png', datatype : 'buffer'} );</sfl></tu><tu PI="220" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="221" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setProgressBar(progress)</sl><tl /><tsl /><prv /><sfl>## win.setProgressBar(progress)</sfl></tu><tu PI="222" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `progress` `{Float}` valid values within [0, 1]. </sl><tl /><tsl /><prv /><sfl>* `progress` `{Float}` valid values within [0, 1]. Setting to negative value (&lt;0) removes the progress bar.</sfl></tu><tu PI="222" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Setting to negative value (&lt;0) removes the progress bar.</sl><tl /><tsl /><prv /><sfl>* `progress` `{Float}` valid values within [0, 1]. Setting to negative value (&lt;0) removes the progress bar.</sfl></tu><tu PI="223" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Linux"</sfl></tu><tu PI="223" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Linux"</sl><tl /><tsl /><prv /><sfl>!!! note "Linux"</sfl></tu><tu PI="224" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    Only Ubuntu is supported, and you'll need to specify the application `.desktop` file through `NW_DESKTOP` env. </sl><tl /><tsl /><prv /><sfl>    Only Ubuntu is supported, and you'll need to specify the application `.desktop` file through `NW_DESKTOP` env. If `NW_DESKTOP` env variable is not found, it uses `nw.desktop` by default.</sfl></tu><tu PI="224" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If `NW_DESKTOP` env variable is not found, it uses `nw.desktop` by default.</sl><tl /><tsl /><prv /><sfl>    Only Ubuntu is supported, and you'll need to specify the application `.desktop` file through `NW_DESKTOP` env. If `NW_DESKTOP` env variable is not found, it uses `nw.desktop` by default.</sfl></tu><tu PI="225" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.setBadgeLabel(label)</sl><tl /><tsl /><prv /><sfl>## win.setBadgeLabel(label)</sfl></tu><tu PI="226" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Set the badge label on the window icon in taskbar or dock.</sl><tl /><tsl /><prv /><sfl>Set the badge label on the window icon in taskbar or dock.</sfl></tu><tu PI="227" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Linux"</sfl></tu><tu PI="227" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Linux"</sl><tl /><tsl /><prv /><sfl>!!! note "Linux"</sfl></tu><tu PI="228" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This API is only supported on Ubuntu and the label is restricted to a string number only. </sl><tl /><tsl /><prv /><sfl>    This API is only supported on Ubuntu and the label is restricted to a string number only. You'll also need to specify the `.desktop` file for your application (see the note on [`setProgressBar`](#winsetprogressbar))</sfl></tu><tu PI="228" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You'll also need to specify the `.desktop` file for your application (see the note on [`setProgressBar`](#winsetprogressbar))</sl><tl /><tsl /><prv /><sfl>    This API is only supported on Ubuntu and the label is restricted to a string number only. You'll also need to specify the `.desktop` file for your application (see the note on [`setProgressBar`](#winsetprogressbar))</sfl></tu><tu PI="229" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.eval(frame, script)</sl><tl /><tsl /><prv /><sfl>## win.eval(frame, script)</sfl></tu><tu PI="230" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `frame` `{HTMLIFrameElement}` the frame to execute in. </sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` the frame to execute in. If `iframe` is `null`, it assumes in current window / frame.</sfl></tu><tu PI="230" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If `iframe` is `null`, it assumes in current window / frame.</sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` the frame to execute in. If `iframe` is `null`, it assumes in current window / frame.</sfl></tu><tu PI="231" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `script` `{String}` the source code of the script to be executed</sl><tl /><tsl /><prv /><sfl>* `script` `{String}` the source code of the script to be executed</sfl></tu><tu PI="232" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Execute a piece of JavaScript in the frame.</sl><tl /><tsl /><prv /><sfl>Execute a piece of JavaScript in the frame.</sfl></tu><tu PI="233" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## win.evalNWBin(frame, path)</sl><tl /><tsl /><prv /><sfl>## win.evalNWBin(frame, path)</sfl></tu><tu PI="234" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `frame` `{HTMLIFrameElement}` the frame to execute in. </sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` the frame to execute in. If `iframe` is `null`, it assumes in current window / frame.</sfl></tu><tu PI="234" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If `iframe` is `null`, it assumes in current window / frame.</sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` the frame to execute in. If `iframe` is `null`, it assumes in current window / frame.</sfl></tu><tu PI="235" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `path` `{String}` the path of the snapshot file generated by `nwjc`</sl><tl /><tsl /><prv /><sfl>* `path` `{String}` the path of the snapshot file generated by `nwjc`</sfl></tu><tu PI="236" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Load and execute the compiled snapshot in the frame. </sl><tl /><tsl /><prv /><sfl>Load and execute the compiled snapshot in the frame. See [Protect JavaScript Source Code with V8 Snapshot](../For Users/Advanced/Protect JavaScript Source Code.md).</sfl></tu><tu PI="236" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Protect JavaScript Source Code with V8 Snapshot](../For Users/Advanced/Protect JavaScript Source Code.md).</sl><tl /><tsl /><prv /><sfl>Load and execute the compiled snapshot in the frame. See [Protect JavaScript Source Code with V8 Snapshot](../For Users/Advanced/Protect JavaScript Source Code.md).</sfl></tu><tu PI="237" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: close</sfl></tu><tu PI="237" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>close</sl><tl /><tsl /><prv /><sfl>## Event: close</sfl></tu><tu PI="238" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The `close` event is a special event that will affect the result of the `Window.close()` function. </sl><tl /><tsl /><prv /><sfl>The `close` event is a special event that will affect the result of the `Window.close()` function. If developer is listening to the `close` event of a window, the `Window.close()` emit the `close` event without closing the window.</sfl></tu><tu PI="238" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If developer is listening to the `close` event of a window, the `Window.close()` emit the `close` event without closing the window.</sl><tl /><tsl /><prv /><sfl>The `close` event is a special event that will affect the result of the `Window.close()` function. If developer is listening to the `close` event of a window, the `Window.close()` emit the `close` event without closing the window.</sfl></tu><tu PI="239" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Usually you would do some shutdown work in the callback of `close` event, and then call `this.close(true)` to really close the window, which will not be caught again. </sl><tl /><tsl /><prv /><sfl>Usually you would do some shutdown work in the callback of `close` event, and then call `this.close(true)` to really close the window, which will not be caught again. Forgetting to add `true` when calling `this.close()` in the callback will result in infinite loop.</sfl></tu><tu PI="239" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Forgetting to add `true` when calling `this.close()` in the callback will result in infinite loop.</sl><tl /><tsl /><prv /><sfl>Usually you would do some shutdown work in the callback of `close` event, and then call `this.close(true)` to really close the window, which will not be caught again. Forgetting to add `true` when calling `this.close()` in the callback will result in infinite loop.</sfl></tu><tu PI="240" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And if the shutdown work takes some time, users may feel that the app is exiting slowly, which is bad experience, so you could just hide the window in the `close` event before really closing it to make a smooth user experience.</sl><tl /><tsl /><prv /><sfl>And if the shutdown work takes some time, users may feel that the app is exiting slowly, which is bad experience, so you could just hide the window in the `close` event before really closing it to make a smooth user experience.</sfl></tu><tu PI="241" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See example code of [`win.close(true)` above](#wincloseforce) for the usage of `close` event.</sl><tl /><tsl /><prv /><sfl>See example code of [`win.close(true)` above](#wincloseforce) for the usage of `close` event.</sfl></tu><tu PI="242" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Mac"</sfl></tu><tu PI="242" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Mac"</sl><tl /><tsl /><prv /><sfl>!!! note "Mac"</sfl></tu><tu PI="243" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    On Mac, there is an argument passed to the callback indicating whether it's being closed by &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt;.</sl><tl /><tsl /><prv /><sfl>    On Mac, there is an argument passed to the callback indicating whether it's being closed by &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt;.</sfl></tu><tu PI="244" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: closed</sfl></tu><tu PI="244" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>closed</sl><tl /><tsl /><prv /><sfl>## Event: closed</sfl></tu><tu PI="245" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The `closed` event is emitted after corresponding window is closed. </sl><tl /><tsl /><prv /><sfl>The `closed` event is emitted after corresponding window is closed. Normally you'll not be able to get this event since after the window is closed all js objects will be released. But it's useful if you're listening this window's events in another window, whose objects will not be released.</sfl></tu><tu PI="245" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Normally you'll not be able to get this event since after the window is closed all js objects will be released. </sl><tl /><tsl /><prv /><sfl>The `closed` event is emitted after corresponding window is closed. Normally you'll not be able to get this event since after the window is closed all js objects will be released. But it's useful if you're listening this window's events in another window, whose objects will not be released.</sfl></tu><tu PI="245" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>But it's useful if you're listening this window's events in another window, whose objects will not be released.</sl><tl /><tsl /><prv /><sfl>The `closed` event is emitted after corresponding window is closed. Normally you'll not be able to get this event since after the window is closed all js objects will be released. But it's useful if you're listening this window's events in another window, whose objects will not be released.</sfl></tu><tu PI="246" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="247" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Open a new window.</sl><tl /><tsl /><prv /><sfl>// Open a new window.</sfl></tu><tu PI="248" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.Window.open('popup.html', {}, function(win) {</sl><tl /><tsl /><prv /><sfl>nw.Window.open('popup.html', {}, function(win) {</sfl></tu><tu PI="249" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Release the 'win' object here after the new window is closed.</sl><tl /><tsl /><prv /><sfl>// Release the 'win' object here after the new window is closed.</sfl></tu><tu PI="250" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>win.on('closed', function() {</sl><tl /><tsl /><prv /><sfl>win.on('closed', function() {</sfl></tu><tu PI="251" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  win = null;</sl><tl /><tsl /><prv /><sfl>  win = null;</sfl></tu><tu PI="252" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="253" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// Listen to main window's close event</sl><tl /><tsl /><prv /><sfl>// Listen to main window's close event</sfl></tu><tu PI="254" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.Window.get().on('close', function() {</sl><tl /><tsl /><prv /><sfl>nw.Window.get().on('close', function() {</sfl></tu><tu PI="255" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // Hide the window to give user the feeling of closing immediately</sl><tl /><tsl /><prv /><sfl>  // Hide the window to give user the feeling of closing immediately</sfl></tu><tu PI="256" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  this.hide();</sl><tl /><tsl /><prv /><sfl>  this.hide();</sfl></tu><tu PI="257" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // If the new window is still open then close it.</sl><tl /><tsl /><prv /><sfl>  // If the new window is still open then close it.</sfl></tu><tu PI="258" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  if (win != null)</sl><tl /><tsl /><prv /><sfl>  if (win != null)</sfl></tu><tu PI="259" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    win.close(true);</sl><tl /><tsl /><prv /><sfl>    win.close(true);</sfl></tu><tu PI="260" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // After closing the new window, close the main window.</sl><tl /><tsl /><prv /><sfl>  // After closing the new window, close the main window.</sfl></tu><tu PI="261" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  this.close(true);</sl><tl /><tsl /><prv /><sfl>  this.close(true);</sfl></tu><tu PI="262" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="263" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="264" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="265" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: loading</sfl></tu><tu PI="265" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>loading</sl><tl /><tsl /><prv /><sfl>## Event: loading</sfl></tu><tu PI="266" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when the window starts to reload, normally you cannot catch this event because usually it's emitted before you actually setup the callback.</sl><tl /><tsl /><prv /><sfl>Emitted when the window starts to reload, normally you cannot catch this event because usually it's emitted before you actually setup the callback.</sfl></tu><tu PI="267" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The only situation that you can catch this event is when you refresh the window and listen to this event in another window.</sl><tl /><tsl /><prv /><sfl>The only situation that you can catch this event is when you refresh the window and listen to this event in another window.</sfl></tu><tu PI="268" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: loaded</sfl></tu><tu PI="268" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>loaded</sl><tl /><tsl /><prv /><sfl>## Event: loaded</sfl></tu><tu PI="269" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when the window is fully loaded, this event behaves the same with `window.onload`, but doesn't rely on the DOM.</sl><tl /><tsl /><prv /><sfl>Emitted when the window is fully loaded, this event behaves the same with `window.onload`, but doesn't rely on the DOM.</sfl></tu><tu PI="270" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: document-start(frame)</sfl></tu><tu PI="270" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>document-start(frame)</sl><tl /><tsl /><prv /><sfl>## Event: document-start(frame)</sfl></tu><tu PI="271" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `frame` `{HTMLIFrameElement}` is the iframe object, or `null` if the event is for the window. </sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` is the iframe object, or `null` if the event is for the window. </sfl></tu><tu PI="272" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when the document object in this window or a child iframe is available, after all files are loaded, but before DOM is constructed or any script is run.</sl><tl /><tsl /><prv /><sfl>Emitted when the document object in this window or a child iframe is available, after all files are loaded, but before DOM is constructed or any script is run.</sfl></tu><tu PI="273" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See `inject-js-start` in [Manifest-format](Manifest Format.md#inject-js-start).</sl><tl /><tsl /><prv /><sfl>See `inject-js-start` in [Manifest-format](Manifest Format.md#inject-js-start).</sfl></tu><tu PI="274" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: document-end(frame)</sfl></tu><tu PI="274" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>document-end(frame)</sl><tl /><tsl /><prv /><sfl>## Event: document-end(frame)</sfl></tu><tu PI="275" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `frame` `{HTMLIFrameElement}` is the iframe object, or `null` if the event is for the window. </sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` is the iframe object, or `null` if the event is for the window. </sfl></tu><tu PI="276" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when the document object in this window or a child iframe is unloaded, but before the `onunload` event is emitted.</sl><tl /><tsl /><prv /><sfl>Emitted when the document object in this window or a child iframe is unloaded, but before the `onunload` event is emitted.</sfl></tu><tu PI="277" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See `inject-js-end` in [[Manifest-format]]</sl><tl /><tsl /><prv /><sfl>See `inject-js-end` in [[Manifest-format]]</sfl></tu><tu PI="278" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: focus</sfl></tu><tu PI="278" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>focus</sl><tl /><tsl /><prv /><sfl>## Event: focus</sfl></tu><tu PI="279" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window gets focus.</sl><tl /><tsl /><prv /><sfl>Emitted when window gets focus.</sfl></tu><tu PI="280" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: blur</sfl></tu><tu PI="280" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>blur</sl><tl /><tsl /><prv /><sfl>## Event: blur</sfl></tu><tu PI="281" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window loses focus.</sl><tl /><tsl /><prv /><sfl>Emitted when window loses focus.</sfl></tu><tu PI="282" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: minimize</sfl></tu><tu PI="282" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>minimize</sl><tl /><tsl /><prv /><sfl>## Event: minimize</sfl></tu><tu PI="283" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window is minimized.</sl><tl /><tsl /><prv /><sfl>Emitted when window is minimized.</sfl></tu><tu PI="284" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: restore</sfl></tu><tu PI="284" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>restore</sl><tl /><tsl /><prv /><sfl>## Event: restore</sfl></tu><tu PI="285" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Behavior Changed"</sfl></tu><tu PI="285" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Behavior Changed"</sl><tl /><tsl /><prv /><sfl>!!! warning "Behavior Changed"</sfl></tu><tu PI="286" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    The behavior of the function is changed since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    The behavior of the function is changed since 0.13.0. Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="286" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    The behavior of the function is changed since 0.13.0. Please see [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="287" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window is restored from minimize, maximize and fullscreen state.</sl><tl /><tsl /><prv /><sfl>Emitted when window is restored from minimize, maximize and fullscreen state.</sfl></tu><tu PI="288" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: maximize</sfl></tu><tu PI="288" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>maximize</sl><tl /><tsl /><prv /><sfl>## Event: maximize</sfl></tu><tu PI="289" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window is maximized.</sl><tl /><tsl /><prv /><sfl>Emitted when window is maximized.</sfl></tu><tu PI="290" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: unmaximize</sfl></tu><tu PI="290" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>unmaximize</sl><tl /><tsl /><prv /><sfl>## Event: unmaximize</sfl></tu><tu PI="291" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window is restored from maximize state.</sl><tl /><tsl /><prv /><sfl>Emitted when window is restored from maximize state.</sfl></tu><tu PI="292" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="292" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="293" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    On some platforms window can be resized even when maximized. </sl><tl /><tsl /><prv /><sfl>    On some platforms window can be resized even when maximized. The `unmaximize` may not be emitted when a maximized window is resized instead of being unmaximized</sfl></tu><tu PI="293" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The `unmaximize` may not be emitted when a maximized window is resized instead of being unmaximized</sl><tl /><tsl /><prv /><sfl>    On some platforms window can be resized even when maximized. The `unmaximize` may not be emitted when a maximized window is resized instead of being unmaximized</sfl></tu><tu PI="294" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: move(x, y)</sfl></tu><tu PI="294" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>move(x, y)</sl><tl /><tsl /><prv /><sfl>## Event: move(x, y)</sfl></tu><tu PI="295" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted after window is moved. </sl><tl /><tsl /><prv /><sfl>Emitted after window is moved. The callback is called with 2 arguments: `(x, y)` for the new location of the left / top corner of the window.</sfl></tu><tu PI="295" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The callback is called with 2 arguments: </sl><tl /><tsl /><prv /><sfl>Emitted after window is moved. The callback is called with 2 arguments: `(x, y)` for the new location of the left / top corner of the window.</sfl></tu><tu PI="295" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`(x, y)` for the new location of the left / top corner of the window.</sl><tl /><tsl /><prv /><sfl>Emitted after window is moved. The callback is called with 2 arguments: `(x, y)` for the new location of the left / top corner of the window.</sfl></tu><tu PI="296" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: resize(width, height)</sfl></tu><tu PI="296" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>resize(width, height)</sl><tl /><tsl /><prv /><sfl>## Event: resize(width, height)</sfl></tu><tu PI="297" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted after window is resized. </sl><tl /><tsl /><prv /><sfl>Emitted after window is resized. The callback is called with 2 arguments: `(width, height)` for the new size of the window.</sfl></tu><tu PI="297" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The callback is called with 2 arguments: </sl><tl /><tsl /><prv /><sfl>Emitted after window is resized. The callback is called with 2 arguments: `(width, height)` for the new size of the window.</sfl></tu><tu PI="297" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`(width, height)` for the new size of the window.</sl><tl /><tsl /><prv /><sfl>Emitted after window is resized. The callback is called with 2 arguments: `(width, height)` for the new size of the window.</sfl></tu><tu PI="298" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: enter-fullscreen</sfl></tu><tu PI="298" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>enter-fullscreen</sl><tl /><tsl /><prv /><sfl>## Event: enter-fullscreen</sfl></tu><tu PI="299" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window enters fullscreen state.</sl><tl /><tsl /><prv /><sfl>Emitted when window enters fullscreen state.</sfl></tu><tu PI="300" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: leave-fullscreen</sfl></tu><tu PI="300" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>leave-fullscreen</sl><tl /><tsl /><prv /><sfl>## Event: leave-fullscreen</sfl></tu><tu PI="301" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="301" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Deprecated"</sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="302" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This feature is deprecated since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. It's now replaced by [`restore` event](#event-restore). See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="302" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It's now replaced by [`restore` event](#event-restore). </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. It's now replaced by [`restore` event](#event-restore). See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="302" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. It's now replaced by [`restore` event](#event-restore). See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="303" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window leaves fullscreen state.</sl><tl /><tsl /><prv /><sfl>Emitted when window leaves fullscreen state.</sfl></tu><tu PI="304" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: zoom</sfl></tu><tu PI="304" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>zoom</sl><tl /><tsl /><prv /><sfl>## Event: zoom</sfl></tu><tu PI="305" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when window zooming changed. </sl><tl /><tsl /><prv /><sfl>Emitted when window zooming changed. It has a parameter indicating the new zoom level. See [`win.zoom()` method](#winzoom) for the parameter's value definition.</sfl></tu><tu PI="305" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It has a parameter indicating the new zoom level. </sl><tl /><tsl /><prv /><sfl>Emitted when window zooming changed. It has a parameter indicating the new zoom level. See [`win.zoom()` method](#winzoom) for the parameter's value definition.</sfl></tu><tu PI="305" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [`win.zoom()` method](#winzoom) for the parameter's value definition.</sl><tl /><tsl /><prv /><sfl>Emitted when window zooming changed. It has a parameter indicating the new zoom level. See [`win.zoom()` method](#winzoom) for the parameter's value definition.</sfl></tu><tu PI="306" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: capturepagedone</sfl></tu><tu PI="306" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>capturepagedone</sl><tl /><tsl /><prv /><sfl>## Event: capturepagedone</sfl></tu><tu PI="307" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="307" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Deprecated"</sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="308" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This feature is deprecated since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. Use the callback with `win.capturePage()` instead. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="308" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Use the callback with `win.capturePage()` instead. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. Use the callback with `win.capturePage()` instead. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="308" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. Use the callback with `win.capturePage()` instead. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="309" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted after the capturePage method is called and image data is ready. </sl><tl /><tsl /><prv /><sfl>Emitted after the capturePage method is called and image data is ready. See `win.capturePage()` callback function for the parameter's value definition.</sfl></tu><tu PI="309" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See `win.capturePage()` callback function for the parameter's value definition.</sl><tl /><tsl /><prv /><sfl>Emitted after the capturePage method is called and image data is ready. See `win.capturePage()` callback function for the parameter's value definition.</sfl></tu><tu PI="310" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: devtools-opened(url)</sfl></tu><tu PI="310" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>devtools-opened(url)</sl><tl /><tsl /><prv /><sfl>## Event: devtools-opened(url)</sfl></tu><tu PI="311" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="311" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>warning "Deprecated"</sl><tl /><tsl /><prv /><sfl>!!! warning "Deprecated"</sfl></tu><tu PI="312" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This feature is deprecated since 0.13.0. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. Use the `callback` passed to [`win.showDevtools`](#winshowdevtoolsiframe-callback) instead. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="312" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Use the `callback` passed to [`win.showDevtools`](#winshowdevtoolsiframe-callback) instead. </sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. Use the `callback` passed to [`win.showDevtools`](#winshowdevtoolsiframe-callback) instead. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="312" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sl><tl /><tsl /><prv /><sfl>    This feature is deprecated since 0.13.0. Use the `callback` passed to [`win.showDevtools`](#winshowdevtoolsiframe-callback) instead. See [Migration Notes from 0.12 to 0.13](../For Users/Migration/From 0.12 to 0.13.md).</sfl></tu><tu PI="313" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [`win.showDevTools()` method](#winshowdevtoolsiframe-callback) for more details.</sl><tl /><tsl /><prv /><sfl>See [`win.showDevTools()` method](#winshowdevtoolsiframe-callback) for more details.</sfl></tu><tu PI="314" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: devtools-closed</sfl></tu><tu PI="314" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>devtools-closed</sl><tl /><tsl /><prv /><sfl>## Event: devtools-closed</sfl></tu><tu PI="315" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted after Devtools is closed.</sl><tl /><tsl /><prv /><sfl>Emitted after Devtools is closed.</sfl></tu><tu PI="316" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [`win.closeDevTools()` method](#winclosedevtools) for more details.</sl><tl /><tsl /><prv /><sfl>See [`win.closeDevTools()` method](#winclosedevtools) for more details.</sfl></tu><tu PI="317" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: new-win-policy (frame, url, policy)</sfl></tu><tu PI="317" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>new-win-policy (frame, url, policy)</sl><tl /><tsl /><prv /><sfl>## Event: new-win-policy (frame, url, policy)</sfl></tu><tu PI="318" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `frame` `{HTMLIFrameElement}` is the object of the child iframe where the request is from, or `null` if it's from the top window.</sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` is the object of the child iframe where the request is from, or `null` if it's from the top window.</sfl></tu><tu PI="319" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `url` `{String}` is the address of the requested link</sl><tl /><tsl /><prv /><sfl>* `url` `{String}` is the address of the requested link</sfl></tu><tu PI="320" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `policy` `{Object}` is an object with the following methods:</sl><tl /><tsl /><prv /><sfl>* `policy` `{Object}` is an object with the following methods:</sfl></tu><tu PI="321" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `ignore()` : </sl><tl /><tsl /><prv /><sfl>    * `ignore()` : ignore the request, navigation won't happen.</sfl></tu><tu PI="321" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>ignore the request, navigation won't happen.</sl><tl /><tsl /><prv /><sfl>    * `ignore()` : ignore the request, navigation won't happen.</sfl></tu><tu PI="322" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `forceCurrent()` : </sl><tl /><tsl /><prv /><sfl>    * `forceCurrent()` : force the link to be opened in the same frame</sfl></tu><tu PI="322" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>force the link to be opened in the same frame</sl><tl /><tsl /><prv /><sfl>    * `forceCurrent()` : force the link to be opened in the same frame</sfl></tu><tu PI="323" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `forceDownload()` : </sl><tl /><tsl /><prv /><sfl>    * `forceDownload()` : force the link to be a downloadable, or open by external program</sfl></tu><tu PI="323" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>force the link to be a downloadable, or open by external program</sl><tl /><tsl /><prv /><sfl>    * `forceDownload()` : force the link to be a downloadable, or open by external program</sfl></tu><tu PI="324" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `forceNewWindow()` : </sl><tl /><tsl /><prv /><sfl>    * `forceNewWindow()` : force the link to be opened in a new window</sfl></tu><tu PI="324" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>force the link to be opened in a new window</sl><tl /><tsl /><prv /><sfl>    * `forceNewWindow()` : force the link to be opened in a new window</sfl></tu><tu PI="325" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `forceNewPopup()` : </sl><tl /><tsl /><prv /><sfl>    * `forceNewPopup()` : force the link to be opened in a new popup window</sfl></tu><tu PI="325" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>force the link to be opened in a new popup window</sl><tl /><tsl /><prv /><sfl>    * `forceNewPopup()` : force the link to be opened in a new popup window</sfl></tu><tu PI="326" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `setNewWindowManifest(m)` : </sl><tl /><tsl /><prv /><sfl>    * `setNewWindowManifest(m)` : control the options for the new popup window. The object `m` is in the same format as the [Window subfields](Manifest Format.md#window-subfields) in manifest format.</sfl></tu><tu PI="326" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>control the options for the new popup window. </sl><tl /><tsl /><prv /><sfl>    * `setNewWindowManifest(m)` : control the options for the new popup window. The object `m` is in the same format as the [Window subfields](Manifest Format.md#window-subfields) in manifest format.</sfl></tu><tu PI="326" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The object `m` is in the same format as the [Window subfields](Manifest Format.md#window-subfields) in manifest format.</sl><tl /><tsl /><prv /><sfl>    * `setNewWindowManifest(m)` : control the options for the new popup window. The object `m` is in the same format as the [Window subfields](Manifest Format.md#window-subfields) in manifest format.</sfl></tu><tu PI="327" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when a new window is requested from this window or a child iframe. </sl><tl /><tsl /><prv /><sfl>Emitted when a new window is requested from this window or a child iframe. You can call `policy.*` methods in the callback to change the default behavior of opening new windows.</sfl></tu><tu PI="327" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You can call `policy.*` methods in the callback to change the default behavior of opening new windows.</sl><tl /><tsl /><prv /><sfl>Emitted when a new window is requested from this window or a child iframe. You can call `policy.*` methods in the callback to change the default behavior of opening new windows.</sfl></tu><tu PI="328" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For example, you can open the URL in system brower when user tries to open in a new window:</sl><tl /><tsl /><prv /><sfl>For example, you can open the URL in system brower when user tries to open in a new window:</sfl></tu><tu PI="329" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="330" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.Window.get().on('new-win-policy', function(frame, url, policy) {</sl><tl /><tsl /><prv /><sfl>nw.Window.get().on('new-win-policy', function(frame, url, policy) {</sfl></tu><tu PI="331" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // do not open the window</sl><tl /><tsl /><prv /><sfl>  // do not open the window</sfl></tu><tu PI="332" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  policy.ignore();</sl><tl /><tsl /><prv /><sfl>  policy.ignore();</sfl></tu><tu PI="333" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  // and open it in external browser</sl><tl /><tsl /><prv /><sfl>  // and open it in external browser</sfl></tu><tu PI="334" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  nw.Shell.openExternal(url);</sl><tl /><tsl /><prv /><sfl>  nw.Shell.openExternal(url);</sfl></tu><tu PI="335" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>});</sl><tl /><tsl /><prv /><sfl>});</sfl></tu><tu PI="336" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="337" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Event: </sl><tl /><tsl /><prv /><sfl>## Event: navigation (frame, url, policy)</sfl></tu><tu PI="337" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>navigation (frame, url, policy)</sl><tl /><tsl /><prv /><sfl>## Event: navigation (frame, url, policy)</sfl></tu><tu PI="338" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `frame` `{HTMLIFrameElement}` is the object of the child iframe where the request is from, or `null` if it's from the top window.</sl><tl /><tsl /><prv /><sfl>* `frame` `{HTMLIFrameElement}` is the object of the child iframe where the request is from, or `null` if it's from the top window.</sfl></tu><tu PI="339" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `url` `{String}` is the address of the requested link</sl><tl /><tsl /><prv /><sfl>* `url` `{String}` is the address of the requested link</sfl></tu><tu PI="340" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `policy` `{Object}` is an object with the following methods:</sl><tl /><tsl /><prv /><sfl>* `policy` `{Object}` is an object with the following methods:</sfl></tu><tu PI="341" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    * `ignore()` : </sl><tl /><tsl /><prv /><sfl>    * `ignore()` : ignore the request, navigation won't happen.</sfl></tu><tu PI="341" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>ignore the request, navigation won't happen.</sl><tl /><tsl /><prv /><sfl>    * `ignore()` : ignore the request, navigation won't happen.</sfl></tu><tu PI="342" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Emitted when navigating to another page. </sl><tl /><tsl /><prv /><sfl>Emitted when navigating to another page. Similar to [`new-win-policy`](#event-new-win-policy-frame-url-policy), you can call `policy.ignore()` within the callback to ignore the navigation.</sfl></tu><tu PI="342" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Similar to [`new-win-policy`](#event-new-win-policy-frame-url-policy), you can call `policy.ignore()` within the callback to ignore the navigation.</sl><tl /><tsl /><prv /><sfl>Emitted when navigating to another page. Similar to [`new-win-policy`](#event-new-win-policy-frame-url-policy), you can call `policy.ignore()` within the callback to ignore the navigation.</sfl></tu></body></Transmate>