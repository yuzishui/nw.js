<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/9 20:42:51" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\JavaScript Contexts in NW.js\JavaScript Contexts in NW.js.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="1623" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\FileInformation.ueprj" CustomTermPath="" PreviewPath="D:\workspace_github\nw.js\nw.js\JavaScript Contexts in NW.js\JavaScript Contexts in NW.jsPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl># JavaScript Contexts in NW.js {: </sl><tl /><tsl /><prv /><sfl># JavaScript Contexts in NW.js {: .doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>.doctitle}</sl><tl /><tsl /><prv /><sfl># JavaScript Contexts in NW.js {: .doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>---</sl><tl /><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[TOC]</sl><tl /><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Concept of JavaScript Context</sl><tl /><tsl /><prv /><sfl>## Concept of JavaScript Context</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Scripts running in different windows live in different JavaScript contexts, i.e. each聽window has its聽own global object and its聽own set of global constructors (such as `Array` or `Object`).</sl><tl /><tsl /><prv /><sfl>Scripts running in different windows live in different JavaScript contexts, i.e. each聽window has its聽own global object and its聽own set of global constructors (such as `Array` or `Object`).</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>That's common practice among web聽browsers and it's a聽good聽thing because, for聽example:</sl><tl /><tsl /><prv /><sfl>That's common practice among web聽browsers and it's a聽good聽thing because, for聽example:</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* when an object's prototype is replaced or augmented by some library (such聽as [Prototype](http://prototypejs.org/)) or聽a聽simpler script, the聽analogous objects in聽other聽windows are unaffected nevertheless;</sl><tl /><tsl /><prv /><sfl>* when an object's prototype is replaced or augmented by some library (such聽as [Prototype](http://prototypejs.org/)) or聽a聽simpler script, the聽analogous objects in聽other聽windows are unaffected nevertheless;</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* when a聽programmer makes a聽mistake (such聽as [missing `new` before a聽poorly聽written constructor](http://ejohn.org/blog/simple-class-instantiation/)) and聽the聽bug affects (pollutes) the聽global scope, it聽still cannot affect larger areas (several windows);</sl><tl /><tsl /><prv /><sfl>* when a聽programmer makes a聽mistake (such聽as [missing `new` before a聽poorly聽written constructor](http://ejohn.org/blog/simple-class-instantiation/)) and聽the聽bug affects (pollutes) the聽global scope, it聽still cannot affect larger areas (several windows);</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* malicious applications cannot access confidential data structures in聽other聽windows.</sl><tl /><tsl /><prv /><sfl>* malicious applications cannot access confidential data structures in聽other聽windows.</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>When a script accessing to an object / function defined in another context, JS engine will temporarily enter the target context and leave it once finished. </sl><tl /><tsl /><prv /><sfl>When a script accessing to an object / function defined in another context, JS engine will temporarily enter the target context and leave it once finished. </sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Separate Context Mode</sl><tl /><tsl /><prv /><sfl>## Separate Context Mode</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Besides the contexts created by browsers, NW.js introduced additional Node context for running Node modules by default. </sl><tl /><tsl /><prv /><sfl>Besides the contexts created by browsers, NW.js introduced additional Node context for running Node modules by default. So NW.js has two types of JavaScript contexts: **Browser Context** and **Node Context**.</sfl></tu><tu PI="12" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>So NW.js has two types of JavaScript contexts: </sl><tl /><tsl /><prv /><sfl>Besides the contexts created by browsers, NW.js introduced additional Node context for running Node modules by default. So NW.js has two types of JavaScript contexts: **Browser Context** and **Node Context**.</sfl></tu><tu PI="12" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>**Browser Context** and **Node Context**.</sl><tl /><tsl /><prv /><sfl>Besides the contexts created by browsers, NW.js introduced additional Node context for running Node modules by default. So NW.js has two types of JavaScript contexts: **Browser Context** and **Node Context**.</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Web Worker"</sfl></tu><tu PI="13" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Web Worker"</sl><tl /><tsl /><prv /><sfl>!!! note "Web Worker"</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    Actually Web Workers are running in a separate JavaScript context which is neither browser context nor node context. </sl><tl /><tsl /><prv /><sfl>    Actually Web Workers are running in a separate JavaScript context which is neither browser context nor node context. But you can't access Web or Node.js or NW.js APIs in Web Worker's context.</sfl></tu><tu PI="14" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>But you can't access Web or Node.js or NW.js APIs in Web Worker's context.</sl><tl /><tsl /><prv /><sfl>    Actually Web Workers are running in a separate JavaScript context which is neither browser context nor node context. But you can't access Web or Node.js or NW.js APIs in Web Worker's context.</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Browser Context</sl><tl /><tsl /><prv /><sfl>### Browser Context</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Load Script in Browser Context</sl><tl /><tsl /><prv /><sfl>#### Load Script in Browser Context</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Scripts loaded or embedded by traditional web ways, such as using `&lt;script&gt;` element or jQuery's [`$.getScript()`](http://api.jquery.com/jQuery.getScript/) or [RequireJS](http://requirejs.org/), are running in browser context.</sl><tl /><tsl /><prv /><sfl>Scripts loaded or embedded by traditional web ways, such as using `&lt;script&gt;` element or jQuery's [`$.getScript()`](http://api.jquery.com/jQuery.getScript/) or [RequireJS](http://requirejs.org/), are running in browser context.</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Global Objects in Browser Context</sl><tl /><tsl /><prv /><sfl>#### Global Objects in Browser Context</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In browser context, there are some global objects including [JS builtin objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) (such as `Date` or `Error` or `TypedArray`) and [Web API](https://developer.mozilla.org/en-US/docs/Web/Reference/API) (such as DOM API).</sl><tl /><tsl /><prv /><sfl>In browser context, there are some global objects including [JS builtin objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) (such as `Date` or `Error` or `TypedArray`) and [Web API](https://developer.mozilla.org/en-US/docs/Web/Reference/API) (such as DOM API).</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Create New Browser Context</sl><tl /><tsl /><prv /><sfl>#### Create New Browser Context</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Different windows and frames have different contexts. </sl><tl /><tsl /><prv /><sfl>Different windows and frames have different contexts. So when you create a new frame or window, you will get a new browser context.</sfl></tu><tu PI="21" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>So when you create a new frame or window, you will get a new browser context.</sl><tl /><tsl /><prv /><sfl>Different windows and frames have different contexts. So when you create a new frame or window, you will get a new browser context.</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Access Node.js and NW.js API in Browser Context</sl><tl /><tsl /><prv /><sfl>#### Access Node.js and NW.js API in Browser Context</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Some objects of Node context are copied to Browser context so that scripts running in Browser context can access Node.js objects:</sl><tl /><tsl /><prv /><sfl>Some objects of Node context are copied to Browser context so that scripts running in Browser context can access Node.js objects:</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `nw` -- the object of all [NW.js APIs](../../References)</sl><tl /><tsl /><prv /><sfl>* `nw` -- the object of all [NW.js APIs](../../References)</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `global` -- the global object of Node Context; </sl><tl /><tsl /><prv /><sfl>* `global` -- the global object of Node Context; same as `nw.global`</sfl></tu><tu PI="25" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>same as `nw.global`</sl><tl /><tsl /><prv /><sfl>* `global` -- the global object of Node Context; same as `nw.global`</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `require` -- the `require()` function for loading Node.js modules; </sl><tl /><tsl /><prv /><sfl>* `require` -- the `require()` function for loading Node.js modules; similar to `nw.require()`, but it also supports `require('nw.gui')` to load NW.js API module.</sfl></tu><tu PI="26" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>similar to `nw.require()`, but it also supports `require('nw.gui')` to load NW.js API module.</sl><tl /><tsl /><prv /><sfl>* `require` -- the `require()` function for loading Node.js modules; similar to `nw.require()`, but it also supports `require('nw.gui')` to load NW.js API module.</sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `process` -- the [process module](https://nodejs.org/api/globals.html#globals_process) of Node.js; </sl><tl /><tsl /><prv /><sfl>* `process` -- the [process module](https://nodejs.org/api/globals.html#globals_process) of Node.js; same as `nw.process`</sfl></tu><tu PI="27" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>same as `nw.process`</sl><tl /><tsl /><prv /><sfl>* `process` -- the [process module](https://nodejs.org/api/globals.html#globals_process) of Node.js; same as `nw.process`</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* `Buffer` -- the [Buffer class](https://nodejs.org/api/globals.html#globals_class_buffer) of Node.js</sl><tl /><tsl /><prv /><sfl>* `Buffer` -- the [Buffer class](https://nodejs.org/api/globals.html#globals_class_buffer) of Node.js</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Relative Path Resolving of `require()` in Browser Context</sl><tl /><tsl /><prv /><sfl>#### Relative Path Resolving of `require()` in Browser Context</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Relative paths in Browser context are resolved according to path of main HTML file (like all browsers do).</sl><tl /><tsl /><prv /><sfl>Relative paths in Browser context are resolved according to path of main HTML file (like all browsers do).</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Node Context</sl><tl /><tsl /><prv /><sfl>### Node Context</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Load Script in Node Context</sl><tl /><tsl /><prv /><sfl>#### Load Script in Node Context</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Scripts loaded with following ways are running in Node context:</sl><tl /><tsl /><prv /><sfl>Scripts loaded with following ways are running in Node context:</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Scripts loaded by `require()` of Node.js API</sl><tl /><tsl /><prv /><sfl>* Scripts loaded by `require()` of Node.js API</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Scripts loaded by [`node-main` in Manifest file](../../References/Manifest Format.md#node-main)</sl><tl /><tsl /><prv /><sfl>* Scripts loaded by [`node-main` in Manifest file](../../References/Manifest Format.md#node-main)</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Global Objects in Node Context</sl><tl /><tsl /><prv /><sfl>#### Global Objects in Node Context</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Scripts running in聽the聽Node context can use [JS builtin objects]() like browser context. </sl><tl /><tsl /><prv /><sfl>Scripts running in聽the聽Node context can use [JS builtin objects]() like browser context. In addition, you can also use [global objects defined by Node.js](https://nodejs.org/api/globals.html), such as `__dirname`, `process`, `Buffer` etc.</sfl></tu><tu PI="37" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In addition, you can also use [global objects defined by Node.js](https://nodejs.org/api/globals.html), such as `__dirname`, `process`, `Buffer` etc.</sl><tl /><tsl /><prv /><sfl>Scripts running in聽the聽Node context can use [JS builtin objects]() like browser context. In addition, you can also use [global objects defined by Node.js](https://nodejs.org/api/globals.html), such as `__dirname`, `process`, `Buffer` etc.</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="38" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note</sl><tl /><tsl /><prv /><sfl>!!! note</sfl></tu><tu PI="39" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    Web APIs are not available in Node context. </sl><tl /><tsl /><prv /><sfl>    Web APIs are not available in Node context. See [Access Browser and NW.js API in Node Context](#access-browser-and-nwjs-api-in-node-context) below to find out how to use them.</sfl></tu><tu PI="39" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Access Browser and NW.js API in Node Context](#access-browser-and-nwjs-api-in-node-context) below to find out how to use them.</sl><tl /><tsl /><prv /><sfl>    Web APIs are not available in Node context. See [Access Browser and NW.js API in Node Context](#access-browser-and-nwjs-api-in-node-context) below to find out how to use them.</sfl></tu><tu PI="40" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Create New Node Context</sl><tl /><tsl /><prv /><sfl>#### Create New Node Context</sfl></tu><tu PI="41" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>**All node modules shares a same Node context in separate context mode**. </sl><tl /><tsl /><prv /><sfl>**All node modules shares a same Node context in separate context mode**. But you have several ways to create new Node contexts:</sfl></tu><tu PI="41" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>But you have several ways to create new Node contexts:</sl><tl /><tsl /><prv /><sfl>**All node modules shares a same Node context in separate context mode**. But you have several ways to create new Node contexts:</sfl></tu><tu PI="42" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Set `new_instance` option to `true` when creating window with [`Window.open()`](../../References/Window.md#windowopenurl-options-callback)</sl><tl /><tsl /><prv /><sfl>* Set `new_instance` option to `true` when creating window with [`Window.open()`](../../References/Window.md#windowopenurl-options-callback)</sfl></tu><tu PI="43" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Start NW.js with `--mixed-context` CLI option to turn NW.js into [Mixed Context mode](#mixed-context)</sl><tl /><tsl /><prv /><sfl>* Start NW.js with `--mixed-context` CLI option to turn NW.js into [Mixed Context mode](#mixed-context)</sfl></tu><tu PI="44" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Access Browser and NW.js API in Node Context</sl><tl /><tsl /><prv /><sfl>#### Access Browser and NW.js API in Node Context</sfl></tu><tu PI="45" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In Node context, there are no browser side or NW.js APIs, such as `alert()` or `document.*` or `nw.Clipboard` etc. To access browser APIs, you have to pass the corresponding objects, such as `window` object, to functions in Node context.</sl><tl /><tsl /><prv /><sfl>In Node context, there are no browser side or NW.js APIs, such as `alert()` or `document.*` or `nw.Clipboard` etc. To access browser APIs, you have to pass the corresponding objects, such as `window` object, to functions in Node context.</sfl></tu><tu PI="46" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See following example for how to achive this.</sl><tl /><tsl /><prv /><sfl>See following example for how to achive this.</sfl></tu><tu PI="47" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Following script are running in Node context (myscript.js):</sl><tl /><tsl /><prv /><sfl>Following script are running in Node context (myscript.js):</sfl></tu><tu PI="48" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="49" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// `el` should be passed from browser context</sl><tl /><tsl /><prv /><sfl>// `el` should be passed from browser context</sfl></tu><tu PI="50" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>exports.setText = function(el) {</sl><tl /><tsl /><prv /><sfl>exports.setText = function(el) {</sfl></tu><tu PI="51" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    el.innerHTML = 'hello';</sl><tl /><tsl /><prv /><sfl>    el.innerHTML = 'hello';</sfl></tu><tu PI="52" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>};</sl><tl /><tsl /><prv /><sfl>};</sfl></tu><tu PI="53" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="54" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In the browser side (index.html):</sl><tl /><tsl /><prv /><sfl>In the browser side (index.html):</sfl></tu><tu PI="55" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```html</sl><tl /><tsl /><prv /><sfl>```html</sfl></tu><tu PI="56" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;div id="el"&gt;&lt;/div&gt;</sl><tl /><tsl /><prv /><sfl>&lt;div id="el"&gt;&lt;/div&gt;</sfl></tu><tu PI="57" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;script&gt;</sfl></tu><tu PI="58" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var myscript = require('./myscript');</sl><tl /><tsl /><prv /><sfl>var myscript = require('./myscript');</sfl></tu><tu PI="59" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// pass the `el` element to the Node function</sl><tl /><tsl /><prv /><sfl>// pass the `el` element to the Node function</sfl></tu><tu PI="60" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>myscript.setText(document.getElementbyId('el'));</sl><tl /><tsl /><prv /><sfl>myscript.setText(document.getElementbyId('el'));</sfl></tu><tu PI="61" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// you will see "hello" in the element</sl><tl /><tsl /><prv /><sfl>// you will see "hello" in the element</sfl></tu><tu PI="62" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;/script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;/script&gt;</sfl></tu><tu PI="63" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="64" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "`window` in Node Context"</sfl></tu><tu PI="64" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "`window` in Node Context"</sl><tl /><tsl /><prv /><sfl>!!! note "`window` in Node Context"</sfl></tu><tu PI="65" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    There is a `window` object in Node context pointing to the main window as set in `main` field of Manifest file.</sl><tl /><tsl /><prv /><sfl>    There is a `window` object in Node context pointing to the main window as set in `main` field of Manifest file.</sfl></tu><tu PI="66" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>#### Relative Paths Resolving of `require()` in Node Context</sl><tl /><tsl /><prv /><sfl>#### Relative Paths Resolving of `require()` in Node Context</sfl></tu><tu PI="67" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Relative paths in node modules are resolved according to path of that module (like Node.js always do).</sl><tl /><tsl /><prv /><sfl>Relative paths in node modules are resolved according to path of that module (like Node.js always do).</sfl></tu><tu PI="68" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Mixed Context Mode</sl><tl /><tsl /><prv /><sfl>## Mixed Context Mode</sfl></tu><tu PI="69" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Mixed context is introduced in NW.js 0.13. </sl><tl /><tsl /><prv /><sfl>Mixed context is introduced in NW.js 0.13. When running NW.js with [`--mixed-context` CLI option](../../References/Command Line Options.md#mixedcontext), a new Node context is created at the time of each browser context creation and running in a same context as browser context, a.k.a. the Mixed context.</sfl></tu><tu PI="69" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>When running NW.js with [`--mixed-context` CLI option](../../References/Command Line Options.md#mixedcontext), a new Node context is created at the time of each browser context creation and running in a same context as browser context, a.k.a. </sl><tl /><tsl /><prv /><sfl>Mixed context is introduced in NW.js 0.13. When running NW.js with [`--mixed-context` CLI option](../../References/Command Line Options.md#mixedcontext), a new Node context is created at the time of each browser context creation and running in a same context as browser context, a.k.a. the Mixed context.</sfl></tu><tu PI="69" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>the Mixed context.</sl><tl /><tsl /><prv /><sfl>Mixed context is introduced in NW.js 0.13. When running NW.js with [`--mixed-context` CLI option](../../References/Command Line Options.md#mixedcontext), a new Node context is created at the time of each browser context creation and running in a same context as browser context, a.k.a. the Mixed context.</sfl></tu><tu PI="70" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Load Script in Mixed Context Mode</sl><tl /><tsl /><prv /><sfl>### Load Script in Mixed Context Mode</sfl></tu><tu PI="71" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To enable Mixed context, add `--mixed-context` when starting NW.js or add it to [`chromium-args` in Manifest file](../../References/Manifest Format.md#chromium-args).</sl><tl /><tsl /><prv /><sfl>To enable Mixed context, add `--mixed-context` when starting NW.js or add it to [`chromium-args` in Manifest file](../../References/Manifest Format.md#chromium-args).</sfl></tu><tu PI="72" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Any scripts loaded using web ways or `require()` in Node.js are running in a same context.</sl><tl /><tsl /><prv /><sfl>Any scripts loaded using web ways or `require()` in Node.js are running in a same context.</sfl></tu><tu PI="73" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Global Objects in Mixed Context</sl><tl /><tsl /><prv /><sfl>### Global Objects in Mixed Context</sfl></tu><tu PI="74" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In Mixed context, you can use all browser and NW.js API in Node modules, and vice versa.</sl><tl /><tsl /><prv /><sfl>In Mixed context, you can use all browser and NW.js API in Node modules, and vice versa.</sfl></tu><tu PI="75" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`package.json`</sl><tl /><tsl /><prv /><sfl>`package.json`</sfl></tu><tu PI="76" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="77" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>{</sl><tl /><tsl /><prv /><sfl>{</sfl></tu><tu PI="78" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "name": </sl><tl /><tsl /><prv /><sfl>    "name": "test-context",</sfl></tu><tu PI="78" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"test-context",</sl><tl /><tsl /><prv /><sfl>    "name": "test-context",</sfl></tu><tu PI="79" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "main": </sl><tl /><tsl /><prv /><sfl>    "main": "index.html",</sfl></tu><tu PI="79" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"index.html",</sl><tl /><tsl /><prv /><sfl>    "main": "index.html",</sfl></tu><tu PI="80" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "chromium-args": </sl><tl /><tsl /><prv /><sfl>    "chromium-args": "--mixed-context"</sfl></tu><tu PI="80" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"--mixed-context"</sl><tl /><tsl /><prv /><sfl>    "chromium-args": "--mixed-context"</sfl></tu><tu PI="81" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}</sl><tl /><tsl /><prv /><sfl>}</sfl></tu><tu PI="82" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="83" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`myscript.js`</sl><tl /><tsl /><prv /><sfl>`myscript.js`</sfl></tu><tu PI="84" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="85" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>exports.createDate = function() {</sl><tl /><tsl /><prv /><sfl>exports.createDate = function() {</sfl></tu><tu PI="86" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    return new Date();</sl><tl /><tsl /><prv /><sfl>    return new Date();</sfl></tu><tu PI="87" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>};</sl><tl /><tsl /><prv /><sfl>};</sfl></tu><tu PI="88" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>exports.showAlert = function() {</sl><tl /><tsl /><prv /><sfl>exports.showAlert = function() {</sfl></tu><tu PI="89" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    alert("I'm running in Node module!");</sl><tl /><tsl /><prv /><sfl>    alert("I'm running in Node module!");</sfl></tu><tu PI="90" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>};</sl><tl /><tsl /><prv /><sfl>};</sfl></tu><tu PI="91" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="92" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Then following comparison will success in Mixed context:</sl><tl /><tsl /><prv /><sfl>Then following comparison will success in Mixed context:</sfl></tu><tu PI="93" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`index.html`</sl><tl /><tsl /><prv /><sfl>`index.html`</sfl></tu><tu PI="94" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```html</sl><tl /><tsl /><prv /><sfl>```html</sfl></tu><tu PI="95" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;script&gt;</sfl></tu><tu PI="96" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var myscript = require('./myscript');</sl><tl /><tsl /><prv /><sfl>var myscript = require('./myscript');</sfl></tu><tu PI="97" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(myscript.createDate() instanceof Date); </sl><tl /><tsl /><prv /><sfl>console.log(myscript.createDate() instanceof Date); // true</sfl></tu><tu PI="97" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// true</sl><tl /><tsl /><prv /><sfl>console.log(myscript.createDate() instanceof Date); // true</sfl></tu><tu PI="98" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>myscript.showAlert(); </sl><tl /><tsl /><prv /><sfl>myscript.showAlert(); // I'm running in Node module!</sfl></tu><tu PI="98" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// I'm running in Node module!</sl><tl /><tsl /><prv /><sfl>myscript.showAlert(); // I'm running in Node module!</sfl></tu><tu PI="99" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;/script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;/script&gt;</sfl></tu><tu PI="100" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="101" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Comparing with Separate Context</sl><tl /><tsl /><prv /><sfl>### Comparing with Separate Context</sfl></tu><tu PI="102" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The advantage of MultiContext mode is that you will not encounter many [type checking issue](#working-with-multiple-contexts) as below.</sl><tl /><tsl /><prv /><sfl>The advantage of MultiContext mode is that you will not encounter many [type checking issue](#working-with-multiple-contexts) as below.</sfl></tu><tu PI="103" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The cons is that in Mixed context mode, you can't share variable easily as before. </sl><tl /><tsl /><prv /><sfl>The cons is that in Mixed context mode, you can't share variable easily as before. To share variables among contexts, you should put variables in a common context that can be accessed from the contexts you want to share with. Or you can use [`window.postMessage()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to send and receive messages between contexts.</sfl></tu><tu PI="103" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To share variables among contexts, you should put variables in a common context that can be accessed from the contexts you want to share with. </sl><tl /><tsl /><prv /><sfl>The cons is that in Mixed context mode, you can't share variable easily as before. To share variables among contexts, you should put variables in a common context that can be accessed from the contexts you want to share with. Or you can use [`window.postMessage()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to send and receive messages between contexts.</sfl></tu><tu PI="103" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Or you can use [`window.postMessage()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to send and receive messages between contexts.</sl><tl /><tsl /><prv /><sfl>The cons is that in Mixed context mode, you can't share variable easily as before. To share variables among contexts, you should put variables in a common context that can be accessed from the contexts you want to share with. Or you can use [`window.postMessage()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to send and receive messages between contexts.</sfl></tu><tu PI="104" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Working with Multiple Contexts</sl><tl /><tsl /><prv /><sfl>## Working with Multiple Contexts</sfl></tu><tu PI="105" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>While differences of contexts are generally benefitial, sometimes they聽may constitute a聽problem in聽your (or聽some other person's)聽code, and聽a聽need for聽a聽workaround arises.</sl><tl /><tsl /><prv /><sfl>While differences of contexts are generally benefitial, sometimes they聽may constitute a聽problem in聽your (or聽some other person's)聽code, and聽a聽need for聽a聽workaround arises.</sfl></tu><tu PI="106" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For example, in different browser contexts, the global objects are not identical and some type checking tricks will fail with multiple contexts.</sl><tl /><tsl /><prv /><sfl>For example, in different browser contexts, the global objects are not identical and some type checking tricks will fail with multiple contexts.</sfl></tu><tu PI="107" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```html</sl><tl /><tsl /><prv /><sfl>```html</sfl></tu><tu PI="108" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;iframe id="myframe" src="myframe.html"&gt;&lt;/iframe&gt;</sl><tl /><tsl /><prv /><sfl>&lt;iframe id="myframe" src="myframe.html"&gt;&lt;/iframe&gt;</sfl></tu><tu PI="109" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;script&gt;</sfl></tu><tu PI="110" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// `window` is the global object of current browser context</sl><tl /><tsl /><prv /><sfl>// `window` is the global object of current browser context</sfl></tu><tu PI="111" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// `myframe.contentWindow` is the global object of the `&lt;iframe&gt;`'s browser context</sl><tl /><tsl /><prv /><sfl>// `myframe.contentWindow` is the global object of the `&lt;iframe&gt;`'s browser context</sfl></tu><tu PI="112" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var currentContext = window;</sl><tl /><tsl /><prv /><sfl>var currentContext = window;</sfl></tu><tu PI="113" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>var iframeContext = document.getElementById('myframe').contentWindow;</sl><tl /><tsl /><prv /><sfl>var iframeContext = document.getElementById('myframe').contentWindow;</sfl></tu><tu PI="114" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// `myfunc` is defined in current context</sl><tl /><tsl /><prv /><sfl>// `myfunc` is defined in current context</sfl></tu><tu PI="115" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>function myfunc() {</sl><tl /><tsl /><prv /><sfl>function myfunc() {</sfl></tu><tu PI="116" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}</sl><tl /><tsl /><prv /><sfl>}</sfl></tu><tu PI="117" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(currentContext.Date === iframeContext.Date); </sl><tl /><tsl /><prv /><sfl>console.log(currentContext.Date === iframeContext.Date); // false</sfl></tu><tu PI="117" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// false</sl><tl /><tsl /><prv /><sfl>console.log(currentContext.Date === iframeContext.Date); // false</sfl></tu><tu PI="118" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(currentContext.Function === iframeContext.Function); </sl><tl /><tsl /><prv /><sfl>console.log(currentContext.Function === iframeContext.Function); // false</sfl></tu><tu PI="118" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// false</sl><tl /><tsl /><prv /><sfl>console.log(currentContext.Function === iframeContext.Function); // false</sfl></tu><tu PI="119" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(myfunc instanceof currentContext.Function); </sl><tl /><tsl /><prv /><sfl>console.log(myfunc instanceof currentContext.Function); // true</sfl></tu><tu PI="119" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// true</sl><tl /><tsl /><prv /><sfl>console.log(myfunc instanceof currentContext.Function); // true</sfl></tu><tu PI="120" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(myfunc instanceof iframeContext.Function); </sl><tl /><tsl /><prv /><sfl>console.log(myfunc instanceof iframeContext.Function); // false</sfl></tu><tu PI="120" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// false</sl><tl /><tsl /><prv /><sfl>console.log(myfunc instanceof iframeContext.Function); // false</sfl></tu><tu PI="121" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(myfunc.constructor === currentContext.Function); </sl><tl /><tsl /><prv /><sfl>console.log(myfunc.constructor === currentContext.Function); // true</sfl></tu><tu PI="121" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// true</sl><tl /><tsl /><prv /><sfl>console.log(myfunc.constructor === currentContext.Function); // true</sfl></tu><tu PI="122" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>console.log(myfunc.constructor === iframeContext.Function); </sl><tl /><tsl /><prv /><sfl>console.log(myfunc.constructor === iframeContext.Function); // false</sfl></tu><tu PI="122" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// false</sl><tl /><tsl /><prv /><sfl>console.log(myfunc.constructor === iframeContext.Function); // false</sfl></tu><tu PI="123" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;/script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;/script&gt;</sfl></tu><tu PI="124" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="125" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Problem with `instanceOf`</sl><tl /><tsl /><prv /><sfl>### Problem with `instanceOf`</sfl></tu><tu PI="126" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The most common cause for聽such problems is the聽behaviour of the `instanceof` operator in聽JavaScript. </sl><tl /><tsl /><prv /><sfl>The most common cause for聽such problems is the聽behaviour of the `instanceof` operator in聽JavaScript. As聽you聽may [see聽in聽MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), the聽operation `someValue instanceof someConstructor` tests whether an聽object has in聽its prototype chain the `prototype` property of the聽given constructor. However, if `someValue` is聽passed from a聽different JavaScript context, then it聽has its聽own line of ancestor objects, and the `someValue instanceof someConstructor` check fails inevitably.</sfl></tu><tu PI="126" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>As聽you聽may [see聽in聽MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), the聽operation `someValue instanceof someConstructor` tests whether an聽object has in聽its prototype chain the `prototype` property of the聽given constructor. </sl><tl /><tsl /><prv /><sfl>The most common cause for聽such problems is the聽behaviour of the `instanceof` operator in聽JavaScript. As聽you聽may [see聽in聽MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), the聽operation `someValue instanceof someConstructor` tests whether an聽object has in聽its prototype chain the `prototype` property of the聽given constructor. However, if `someValue` is聽passed from a聽different JavaScript context, then it聽has its聽own line of ancestor objects, and the `someValue instanceof someConstructor` check fails inevitably.</sfl></tu><tu PI="126" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>However, if `someValue` is聽passed from a聽different JavaScript context, then it聽has its聽own line of ancestor objects, and the `someValue instanceof someConstructor` check fails inevitably.</sl><tl /><tsl /><prv /><sfl>The most common cause for聽such problems is the聽behaviour of the `instanceof` operator in聽JavaScript. As聽you聽may [see聽in聽MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), the聽operation `someValue instanceof someConstructor` tests whether an聽object has in聽its prototype chain the `prototype` property of the聽given constructor. However, if `someValue` is聽passed from a聽different JavaScript context, then it聽has its聽own line of ancestor objects, and the `someValue instanceof someConstructor` check fails inevitably.</sfl></tu><tu PI="127" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For example, a聽simple check `someValue instanceof Array` cannot determine if a聽variable's value is聽an聽array's if it's passed from聽another context (see [Determining with absolute accuracy whether or聽not a聽JavaScript object is an聽array](http://web.mit.edu/jwalden/www/isArray.html) for聽details).</sl><tl /><tsl /><prv /><sfl>For example, a聽simple check `someValue instanceof Array` cannot determine if a聽variable's value is聽an聽array's if it's passed from聽another context (see [Determining with absolute accuracy whether or聽not a聽JavaScript object is an聽array](http://web.mit.edu/jwalden/www/isArray.html) for聽details).</sfl></tu><tu PI="128" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Problem with `obj.constructor`</sl><tl /><tsl /><prv /><sfl>### Problem with `obj.constructor`</sfl></tu><tu PI="129" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The same problem arises when the `obj.constructor` property is checked directly (for聽example, when `someValue.constructor === Array` is used instead聽of `someValue instanceof Array`).</sl><tl /><tsl /><prv /><sfl>The same problem arises when the `obj.constructor` property is checked directly (for聽example, when `someValue.constructor === Array` is used instead聽of `someValue instanceof Array`).</sfl></tu><tu PI="130" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Problem of `obj.__proto__`</sl><tl /><tsl /><prv /><sfl>### Problem of `obj.__proto__`</sfl></tu><tu PI="131" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The legacy `obj.__proto__` gives you access to the prototype of that object directly. </sl><tl /><tsl /><prv /><sfl>The legacy `obj.__proto__` gives you access to the prototype of that object directly. Comparing it's constructor with global object or use `instanceof` as above will still lead to the wrong result.</sfl></tu><tu PI="131" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Comparing it's constructor with global object or use `instanceof` as above will still lead to the wrong result.</sl><tl /><tsl /><prv /><sfl>The legacy `obj.__proto__` gives you access to the prototype of that object directly. Comparing it's constructor with global object or use `instanceof` as above will still lead to the wrong result.</sfl></tu><tu PI="132" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Problems in 3rd-Party Library</sl><tl /><tsl /><prv /><sfl>### Problems in 3rd-Party Library</sfl></tu><tu PI="133" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>3rd-party libraries may use problematic ways of type checking listed above. </sl><tl /><tsl /><prv /><sfl>3rd-party libraries may use problematic ways of type checking listed above. That will cause misterious errors. Once it happens, it should be a bug of 3rd-party library. You are recommended to report a bug for the library or fix it your own.</sfl></tu><tu PI="133" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>That will cause misterious errors. </sl><tl /><tsl /><prv /><sfl>3rd-party libraries may use problematic ways of type checking listed above. That will cause misterious errors. Once it happens, it should be a bug of 3rd-party library. You are recommended to report a bug for the library or fix it your own.</sfl></tu><tu PI="133" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Once it happens, it should be a bug of 3rd-party library. </sl><tl /><tsl /><prv /><sfl>3rd-party libraries may use problematic ways of type checking listed above. That will cause misterious errors. Once it happens, it should be a bug of 3rd-party library. You are recommended to report a bug for the library or fix it your own.</sfl></tu><tu PI="133" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You are recommended to report a bug for the library or fix it your own.</sl><tl /><tsl /><prv /><sfl>3rd-party libraries may use problematic ways of type checking listed above. That will cause misterious errors. Once it happens, it should be a bug of 3rd-party library. You are recommended to report a bug for the library or fix it your own.</sfl></tu><tu PI="134" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Reliable Way of Type Checking Across Contexts</sl><tl /><tsl /><prv /><sfl>### Reliable Way of Type Checking Across Contexts</sfl></tu><tu PI="135" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>A聽way to聽prevent context-related problems is to聽**avoid using `instanceof`** when a聽value may聽come from聽another JavaScript context.</sl><tl /><tsl /><prv /><sfl>A聽way to聽prevent context-related problems is to聽**avoid using `instanceof`** when a聽value may聽come from聽another JavaScript context.</sfl></tu><tu PI="136" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You聽may use [`Array.isArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) method to聽check whether a聽value is聽an聽array, and聽that聽method works reliably across contexts.</sl><tl /><tsl /><prv /><sfl>You聽may use [`Array.isArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) method to聽check whether a聽value is聽an聽array, and聽that聽method works reliably across contexts.</sfl></tu><tu PI="137" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For testing if `someValue` is an object of other context dependent globals, like `Function` or `Date` etc., you may use following tricks to test the actual types:</sl><tl /><tsl /><prv /><sfl>For testing if `someValue` is an object of other context dependent globals, like `Function` or `Date` etc., you may use following tricks to test the actual types:</sfl></tu><tu PI="138" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="139" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// test a function</sl><tl /><tsl /><prv /><sfl>// test a function</sfl></tu><tu PI="140" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Object.prototype.toString.apply(someValue) === "[object Function]"</sl><tl /><tsl /><prv /><sfl>Object.prototype.toString.apply(someValue) === "[object Function]"</sfl></tu><tu PI="141" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>// test a Date</sl><tl /><tsl /><prv /><sfl>// test a Date</sfl></tu><tu PI="142" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Object.prototype.toString.apply(someValue) === "[object Date]"</sl><tl /><tsl /><prv /><sfl>Object.prototype.toString.apply(someValue) === "[object Date]"</sfl></tu><tu PI="143" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="144" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>However, if such a聽convenient alternate method is聽not readily available, or聽when you聽face a聽problem in聽someone other's (not聽your聽own) code and聽patching聽that would聽need a聽hassle, then聽another workaround is聽necessary.</sl><tl /><tsl /><prv /><sfl>However, if such a聽convenient alternate method is聽not readily available, or聽when you聽face a聽problem in聽someone other's (not聽your聽own) code and聽patching聽that would聽need a聽hassle, then聽another workaround is聽necessary.</sfl></tu><tu PI="145" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Also you can use [`nwglobal`](https://github.com/Mithgol/nwglobal), which returns the global objects in Node context, to workaround the type checking in some cases.</sl><tl /><tsl /><prv /><sfl>Also you can use [`nwglobal`](https://github.com/Mithgol/nwglobal), which returns the global objects in Node context, to workaround the type checking in some cases.</sfl></tu></body></Transmate>