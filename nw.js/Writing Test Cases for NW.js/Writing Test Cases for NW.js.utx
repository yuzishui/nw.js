<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/9 20:40:51" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\Writing Test Cases for NW.js\Writing Test Cases for NW.js.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="316" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\FileInformation.ueprj" CustomTermPath="" PreviewPath="D:\workspace_github\nw.js\nw.js\Writing Test Cases for NW.js\Writing Test Cases for NW.jsPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl># Writing Test Cases for NW.js {: </sl><tl /><tsl /><prv /><sfl># Writing Test Cases for NW.js {: .doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>.doctitle}</sl><tl /><tsl /><prv /><sfl># Writing Test Cases for NW.js {: .doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>---</sl><tl /><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[TOC]</sl><tl /><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Test Framework</sl><tl /><tsl /><prv /><sfl>## Test Framework</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>NW.js is using a tiny Python based framework only in three files. </sl><tl /><tsl /><prv /><sfl>NW.js is using a tiny Python based framework only in three files. You can read the source code in [`test` directory](https://github.com/nwjs/nw.js/tree/nw13/test).</sfl></tu><tu PI="5" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You can read the source code in [`test` directory](https://github.com/nwjs/nw.js/tree/nw13/test).</sl><tl /><tsl /><prv /><sfl>NW.js is using a tiny Python based framework only in three files. You can read the source code in [`test` directory](https://github.com/nwjs/nw.js/tree/nw13/test).</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Each test case in NW.js is a runnable app, so that you can manually run the case without the framework.</sl><tl /><tsl /><prv /><sfl>Each test case in NW.js is a runnable app, so that you can manually run the case without the framework.</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>In NW.js, there are two types of test cases: </sl><tl /><tsl /><prv /><sfl>In NW.js, there are two types of test cases: `auto` and `remoting`. See [Write Test Cases](#write-test-cases) sections below to see the instructions.</sfl></tu><tu PI="7" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`auto` and `remoting`. </sl><tl /><tsl /><prv /><sfl>In NW.js, there are two types of test cases: `auto` and `remoting`. See [Write Test Cases](#write-test-cases) sections below to see the instructions.</sfl></tu><tu PI="7" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Write Test Cases](#write-test-cases) sections below to see the instructions.</sl><tl /><tsl /><prv /><sfl>In NW.js, there are two types of test cases: `auto` and `remoting`. See [Write Test Cases](#write-test-cases) sections below to see the instructions.</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To run the test cases, use the following command:</sl><tl /><tsl /><prv /><sfl>To run the test cases, use the following command:</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```bash</sl><tl /><tsl /><prv /><sfl>```bash</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>python test/test.py -t 80 auto</sl><tl /><tsl /><prv /><sfl>python test/test.py -t 80 auto</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>python test/test.py -t 80 remoting</sl><tl /><tsl /><prv /><sfl>python test/test.py -t 80 remoting</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Write Test Cases</sl><tl /><tsl /><prv /><sfl>## Write Test Cases</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Auto Test Case</sl><tl /><tsl /><prv /><sfl>### Auto Test Case</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>**TODO**</sl><tl /><tsl /><prv /><sfl>**TODO**</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Remoting Test Case</sl><tl /><tsl /><prv /><sfl>### Remoting Test Case</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The remoting test cases are driven by ChromeDriver. </sl><tl /><tsl /><prv /><sfl>The remoting test cases are driven by ChromeDriver. Usually these test cases involves user interaction. See [Test with ChromeDriver](../For Users/Advanced/Test with ChromeDriver.md) for the usage of ChromeDriver.</sfl></tu><tu PI="17" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Usually these test cases involves user interaction. </sl><tl /><tsl /><prv /><sfl>The remoting test cases are driven by ChromeDriver. Usually these test cases involves user interaction. See [Test with ChromeDriver](../For Users/Advanced/Test with ChromeDriver.md) for the usage of ChromeDriver.</sfl></tu><tu PI="17" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Test with ChromeDriver](../For Users/Advanced/Test with ChromeDriver.md) for the usage of ChromeDriver.</sl><tl /><tsl /><prv /><sfl>The remoting test cases are driven by ChromeDriver. Usually these test cases involves user interaction. See [Test with ChromeDriver](../For Users/Advanced/Test with ChromeDriver.md) for the usage of ChromeDriver.</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>A remoting test case requires a `test.py` file in the root of the application folder.</sl><tl /><tsl /><prv /><sfl>A remoting test case requires a `test.py` file in the root of the application folder.</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Here is the template of `test.py` file:</sl><tl /><tsl /><prv /><sfl>Here is the template of `test.py` file:</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```python</sl><tl /><tsl /><prv /><sfl>```python</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>import time</sl><tl /><tsl /><prv /><sfl>import time</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>import os</sl><tl /><tsl /><prv /><sfl>import os</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>from selenium import webdriver</sl><tl /><tsl /><prv /><sfl>from selenium import webdriver</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>from selenium.webdriver.chrome.options import Options</sl><tl /><tsl /><prv /><sfl>from selenium.webdriver.chrome.options import Options</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>chrome_options = Options()</sl><tl /><tsl /><prv /><sfl>chrome_options = Options()</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>chrome_options.add_argument("nwapp=" + os.path.dirname(os.path.abspath(__file__)))</sl><tl /><tsl /><prv /><sfl>chrome_options.add_argument("nwapp=" + os.path.dirname(os.path.abspath(__file__)))</sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>driver = webdriver.Chrome(executable_path=os.environ['CHROMEDRIVER'], chrome_options=chrome_options)</sl><tl /><tsl /><prv /><sfl>driver = webdriver.Chrome(executable_path=os.environ['CHROMEDRIVER'], chrome_options=chrome_options)</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>time.sleep(1)</sl><tl /><tsl /><prv /><sfl>time.sleep(1)</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>try:</sl><tl /><tsl /><prv /><sfl>try:</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    print driver.current_url</sl><tl /><tsl /><prv /><sfl>    print driver.current_url</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    # Put your test code here using `assert`</sl><tl /><tsl /><prv /><sfl>    # Put your test code here using `assert`</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>finally:</sl><tl /><tsl /><prv /><sfl>finally:</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    driver.quit()</sl><tl /><tsl /><prv /><sfl>    driver.quit()</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The real case is an NW.js app. </sl><tl /><tsl /><prv /><sfl>The real case is an NW.js app. With ChromeDriver, you can simulate mouse clicks and inputs and then get the content of some DOM element. For example, with following code, when you click the button of "Click Me", a new DOM element will be added to the document with content of "success":</sfl></tu><tu PI="35" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>With ChromeDriver, you can simulate mouse clicks and inputs and then get the content of some DOM element. </sl><tl /><tsl /><prv /><sfl>The real case is an NW.js app. With ChromeDriver, you can simulate mouse clicks and inputs and then get the content of some DOM element. For example, with following code, when you click the button of "Click Me", a new DOM element will be added to the document with content of "success":</sfl></tu><tu PI="35" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For example, with following code, when you click the button of "Click Me", a new DOM element will be added to the document with content of "success":</sl><tl /><tsl /><prv /><sfl>The real case is an NW.js app. With ChromeDriver, you can simulate mouse clicks and inputs and then get the content of some DOM element. For example, with following code, when you click the button of "Click Me", a new DOM element will be added to the document with content of "success":</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```html</sl><tl /><tsl /><prv /><sfl>```html</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;button id="clickme" onclick="success()"&gt;Click Me&lt;/button&gt;</sl><tl /><tsl /><prv /><sfl>&lt;button id="clickme" onclick="success()"&gt;Click Me&lt;/button&gt;</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;script&gt;</sfl></tu><tu PI="39" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>function success() {</sl><tl /><tsl /><prv /><sfl>function success() {</sfl></tu><tu PI="40" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    var el = document.createElement('div');</sl><tl /><tsl /><prv /><sfl>    var el = document.createElement('div');</sfl></tu><tu PI="41" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    el.id = 'result';</sl><tl /><tsl /><prv /><sfl>    el.id = 'result';</sfl></tu><tu PI="42" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    el.innerHTML = 'success';</sl><tl /><tsl /><prv /><sfl>    el.innerHTML = 'success';</sfl></tu><tu PI="43" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    document.body.appendChild(el);</sl><tl /><tsl /><prv /><sfl>    document.body.appendChild(el);</sfl></tu><tu PI="44" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}</sl><tl /><tsl /><prv /><sfl>}</sfl></tu><tu PI="45" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;/script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;/script&gt;</sfl></tu><tu PI="46" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="47" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Then you can test it in `test.py` script:</sl><tl /><tsl /><prv /><sfl>Then you can test it in `test.py` script:</sfl></tu><tu PI="48" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```python</sl><tl /><tsl /><prv /><sfl>```python</sfl></tu><tu PI="49" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>driver.implicitly_wait(10) # 10s timeout when finding an element</sl><tl /><tsl /><prv /><sfl>driver.implicitly_wait(10) # 10s timeout when finding an element</sfl></tu><tu PI="50" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>clickme = driver.find_element_by_id('clickme')</sl><tl /><tsl /><prv /><sfl>clickme = driver.find_element_by_id('clickme')</sfl></tu><tu PI="51" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>clickme.click() # click the button</sl><tl /><tsl /><prv /><sfl>clickme.click() # click the button</sfl></tu><tu PI="52" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>result = driver.find_element_by_id('result')</sl><tl /><tsl /><prv /><sfl>result = driver.find_element_by_id('result')</sfl></tu><tu PI="53" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>assert("success" in result.get_attribute('innerHTML')) # assert "success" is in the element</sl><tl /><tsl /><prv /><sfl>assert("success" in result.get_attribute('innerHTML')) # assert "success" is in the element</sfl></tu><tu PI="54" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu></body></Transmate>