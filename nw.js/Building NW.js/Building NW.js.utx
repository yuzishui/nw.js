<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/9 20:40:50" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\Building NW.js\Building NW.js.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="744" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\FileInformation.ueprj" CustomTermPath="" PreviewPath="D:\workspace_github\nw.js\nw.js\Building NW.js\Building NW.jsPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl># Building NW.js {: </sl><tl /><tsl /><prv /><sfl># Building NW.js {: .doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>.doctitle}</sl><tl /><tsl /><prv /><sfl># Building NW.js {: .doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>---</sl><tl /><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[TOC]</sl><tl /><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! important</sfl></tu><tu PI="4" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>important</sl><tl /><tsl /><prv /><sfl>!!! important</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    This document is written for latest **NW 0.13**. </sl><tl /><tsl /><prv /><sfl>    This document is written for latest **NW 0.13**. For legacy build instructions, please read the [wiki page](https://github.com/nwjs/nw.js/wiki/Building-nw.js) on GitHub.</sfl></tu><tu PI="5" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For legacy build instructions, please read the [wiki page](https://github.com/nwjs/nw.js/wiki/Building-nw.js) on GitHub.</sl><tl /><tsl /><prv /><sfl>    This document is written for latest **NW 0.13**. For legacy build instructions, please read the [wiki page](https://github.com/nwjs/nw.js/wiki/Building-nw.js) on GitHub.</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Prerequisites</sl><tl /><tsl /><prv /><sfl>## Prerequisites</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>NW.js use same build tools and similar steps as Chromium. </sl><tl /><tsl /><prv /><sfl>NW.js use same build tools and similar steps as Chromium. Read the instructions according to your platform to install `depot_tools` and other prerequistes:</sfl></tu><tu PI="7" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Read the instructions according to your platform to install `depot_tools` and other prerequistes:</sl><tl /><tsl /><prv /><sfl>NW.js use same build tools and similar steps as Chromium. Read the instructions according to your platform to install `depot_tools` and other prerequistes:</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* [Windows](http://www.chromium.org/developers/how-tos/build-instructions-windows)</sl><tl /><tsl /><prv /><sfl>* [Windows](http://www.chromium.org/developers/how-tos/build-instructions-windows)</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* [Mac OS X](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md)</sl><tl /><tsl /><prv /><sfl>* [Mac OS X](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md)</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* [Linux](https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md)</sl><tl /><tsl /><prv /><sfl>* [Linux](https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md)</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Windows"</sfl></tu><tu PI="11" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Windows"</sl><tl /><tsl /><prv /><sfl>!!! note "Windows"</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    As suggested by Chromium document, you need to run `set DEPOT_TOOLS_WIN_TOOLCHAIN=0` or set the variable in your global environment.</sl><tl /><tsl /><prv /><sfl>    As suggested by Chromium document, you need to run `set DEPOT_TOOLS_WIN_TOOLCHAIN=0` or set the variable in your global environment.</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    CLang is the build tool used by non-Windows platforms. </sl><tl /><tsl /><prv /><sfl>    CLang is the build tool used by non-Windows platforms. On Windows, it's not supported yet. You need to run `set GYP_DEFINES="clang=0"` to disable CLang on Windows before going to next steps.</sfl></tu><tu PI="13" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>On Windows, it's not supported yet. </sl><tl /><tsl /><prv /><sfl>    CLang is the build tool used by non-Windows platforms. On Windows, it's not supported yet. You need to run `set GYP_DEFINES="clang=0"` to disable CLang on Windows before going to next steps.</sfl></tu><tu PI="13" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>You need to run `set GYP_DEFINES="clang=0"` to disable CLang on Windows before going to next steps.</sl><tl /><tsl /><prv /><sfl>    CLang is the build tool used by non-Windows platforms. On Windows, it's not supported yet. You need to run `set GYP_DEFINES="clang=0"` to disable CLang on Windows before going to next steps.</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "Xcode 7"</sfl></tu><tu PI="14" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "Xcode 7"</sl><tl /><tsl /><prv /><sfl>!!! note "Xcode 7"</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    Mac SDK 10.11 as part of Xcode 7 is not supported yet. </sl><tl /><tsl /><prv /><sfl>    Mac SDK 10.11 as part of Xcode 7 is not supported yet. If you have upgraded to Xcode 7, either downgrade to Xcode 6 or copy Mac SDK 10.10 from other machines under ```xcode-select -p`/Platforms/MacOSX.platform/Developer/SDKs`` as suggested by [Chromium document](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md).</sfl></tu><tu PI="15" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>If you have upgraded to Xcode 7, either downgrade to Xcode 6 or copy Mac SDK 10.10 from other machines under ```xcode-select -p`/Platforms/MacOSX.platform/Developer/SDKs`` as suggested by [Chromium document](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md).</sl><tl /><tsl /><prv /><sfl>    Mac SDK 10.11 as part of Xcode 7 is not supported yet. If you have upgraded to Xcode 7, either downgrade to Xcode 6 or copy Mac SDK 10.10 from other machines under ```xcode-select -p`/Platforms/MacOSX.platform/Developer/SDKs`` as suggested by [Chromium document](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md).</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Get the Code</sl><tl /><tsl /><prv /><sfl>## Get the Code</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>**Step 1.** Create a folder for holding NW.js source code, like `$HOME/nwjs`, and run following command in the folder to generate `.gclient` file:</sl><tl /><tsl /><prv /><sfl>**Step 1.** Create a folder for holding NW.js source code, like `$HOME/nwjs`, and run following command in the folder to generate `.gclient` file:</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```bash</sl><tl /><tsl /><prv /><sfl>```bash</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>mkdir -p $HOME/nwjs</sl><tl /><tsl /><prv /><sfl>mkdir -p $HOME/nwjs</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>cd $HOME/nwjs</sl><tl /><tsl /><prv /><sfl>cd $HOME/nwjs</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>gclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw13</sl><tl /><tsl /><prv /><sfl>gclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw13</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Generally if you are not interested in running Chromium tests, you don't have to sync the test cases and reference builds, which saves you lot of time. </sl><tl /><tsl /><prv /><sfl>Generally if you are not interested in running Chromium tests, you don't have to sync the test cases and reference builds, which saves you lot of time. Open the `.gclient` file you just created and replace `custom_deps` section with followings:</sfl></tu><tu PI="23" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Open the `.gclient` file you just created and replace `custom_deps` section with followings:</sl><tl /><tsl /><prv /><sfl>Generally if you are not interested in running Chromium tests, you don't have to sync the test cases and reference builds, which saves you lot of time. Open the `.gclient` file you just created and replace `custom_deps` section with followings:</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```python</sl><tl /><tsl /><prv /><sfl>```python</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"custom_deps" : </sl><tl /><tsl /><prv /><sfl>"custom_deps" : {</sfl></tu><tu PI="25" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>{</sl><tl /><tsl /><prv /><sfl>"custom_deps" : {</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/third_party/WebKit/LayoutTests": </sl><tl /><tsl /><prv /><sfl>    "src/third_party/WebKit/LayoutTests": None,</sfl></tu><tu PI="26" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/third_party/WebKit/LayoutTests": None,</sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/chrome_frame/tools/test/reference_build/chrome": </sl><tl /><tsl /><prv /><sfl>    "src/chrome_frame/tools/test/reference_build/chrome": None,</sfl></tu><tu PI="27" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/chrome_frame/tools/test/reference_build/chrome": None,</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/chrome_frame/tools/test/reference_build/chrome_win": </sl><tl /><tsl /><prv /><sfl>    "src/chrome_frame/tools/test/reference_build/chrome_win": None,</sfl></tu><tu PI="28" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/chrome_frame/tools/test/reference_build/chrome_win": None,</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/chrome/tools/test/reference_build/chrome": </sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome": None,</sfl></tu><tu PI="29" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome": None,</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/chrome/tools/test/reference_build/chrome_linux": </sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome_linux": None,</sfl></tu><tu PI="30" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome_linux": None,</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/chrome/tools/test/reference_build/chrome_mac": </sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome_mac": None,</sfl></tu><tu PI="31" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome_mac": None,</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    "src/chrome/tools/test/reference_build/chrome_win": </sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome_win": None,</sfl></tu><tu PI="32" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>None,</sl><tl /><tsl /><prv /><sfl>    "src/chrome/tools/test/reference_build/chrome_win": None,</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}</sl><tl /><tsl /><prv /><sfl>}</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>**Step 2.** Run following command in your terminal:</sl><tl /><tsl /><prv /><sfl>**Step 2.** Run following command in your terminal:</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>gclient sync --with_branch_heads</sl><tl /><tsl /><prv /><sfl>gclient sync --with_branch_heads</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="39" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>This usually downloads 20G+ from GitHub and Google's Git repos. </sl><tl /><tsl /><prv /><sfl>This usually downloads 20G+ from GitHub and Google's Git repos. Make sure you have a good network provider and be patient :stuck_out_tongue:</sfl></tu><tu PI="39" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Make sure you have a good network provider and be patient :stuck_out_tongue:</sl><tl /><tsl /><prv /><sfl>This usually downloads 20G+ from GitHub and Google's Git repos. Make sure you have a good network provider and be patient :stuck_out_tongue:</sfl></tu><tu PI="40" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>When finished, you will see a `src` folder created in the same folder as `.gclient`.</sl><tl /><tsl /><prv /><sfl>When finished, you will see a `src` folder created in the same folder as `.gclient`.</sfl></tu><tu PI="41" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "First Build on Linux"</sfl></tu><tu PI="41" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "First Build on Linux"</sl><tl /><tsl /><prv /><sfl>!!! note "First Build on Linux"</sfl></tu><tu PI="42" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    If you are building on Linux **for the first time**, you need to run `gclient sync --with_branch_heads --nohooks` and then run `./build/install-build-deps.sh` to install dependencies on Ubuntu. </sl><tl /><tsl /><prv /><sfl>    If you are building on Linux **for the first time**, you need to run `gclient sync --with_branch_heads --nohooks` and then run `./build/install-build-deps.sh` to install dependencies on Ubuntu. See [Chromium document](http://dev.chromium.org/developers/how-tos/get-the-code) for detailed instructions of getting the source code.</sfl></tu><tu PI="42" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Chromium document](http://dev.chromium.org/developers/how-tos/get-the-code) for detailed instructions of getting the source code.</sl><tl /><tsl /><prv /><sfl>    If you are building on Linux **for the first time**, you need to run `gclient sync --with_branch_heads --nohooks` and then run `./build/install-build-deps.sh` to install dependencies on Ubuntu. See [Chromium document](http://dev.chromium.org/developers/how-tos/get-the-code) for detailed instructions of getting the source code.</sfl></tu><tu PI="43" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! note "First Build on Windows"</sfl></tu><tu PI="43" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>note "First Build on Windows"</sl><tl /><tsl /><prv /><sfl>!!! note "First Build on Windows"</sfl></tu><tu PI="44" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    On Windows, you have to install [DirectX SDK](https://www.microsoft.com/en-us/download/details.aspx?id=6812) and copy the files into the source folder manually using following bash command:</sl><tl /><tsl /><prv /><sfl>    On Windows, you have to install [DirectX SDK](https://www.microsoft.com/en-us/download/details.aspx?id=6812) and copy the files into the source folder manually using following bash command:</sfl></tu><tu PI="45" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```bash</sl><tl /><tsl /><prv /><sfl>```bash</sfl></tu><tu PI="46" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>mkdir -p $HOME/nwjs/src/third_party/directxsdk/files</sl><tl /><tsl /><prv /><sfl>mkdir -p $HOME/nwjs/src/third_party/directxsdk/files</sfl></tu><tu PI="47" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>cp -r /c/Program\ Files\ \(x86\)/Microsoft\ DirectX\ SDK\ \(June\ 2010\)/* \</sl><tl /><tsl /><prv /><sfl>cp -r /c/Program\ Files\ \(x86\)/Microsoft\ DirectX\ SDK\ \(June\ 2010\)/* \</sfl></tu><tu PI="48" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>$HOME/nwjs/src/third_party/directxsdk/files/</sl><tl /><tsl /><prv /><sfl>$HOME/nwjs/src/third_party/directxsdk/files/</sfl></tu><tu PI="49" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="50" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Build</sl><tl /><tsl /><prv /><sfl>## Build</sfl></tu><tu PI="51" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Build files are generated in `out/` folder during `gclient sync`. </sl><tl /><tsl /><prv /><sfl>Build files are generated in `out/` folder during `gclient sync`. Run following command in your terminal will generate the Debug build of standard NW.js binaries in `out/Debug` folder:</sfl></tu><tu PI="51" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Run following command in your terminal will generate the Debug build of standard NW.js binaries in `out/Debug` folder:</sl><tl /><tsl /><prv /><sfl>Build files are generated in `out/` folder during `gclient sync`. Run following command in your terminal will generate the Debug build of standard NW.js binaries in `out/Debug` folder:</sfl></tu><tu PI="52" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```bash</sl><tl /><tsl /><prv /><sfl>```bash</sfl></tu><tu PI="53" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>cd src</sl><tl /><tsl /><prv /><sfl>cd src</sfl></tu><tu PI="54" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>ninja -C out/Debug nwjs</sl><tl /><tsl /><prv /><sfl>ninja -C out/Debug nwjs</sfl></tu><tu PI="55" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="56" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>!!! </sl><tl /><tsl /><prv /><sfl>!!! tip "Build Time"</sfl></tu><tu PI="56" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>tip "Build Time"</sl><tl /><tsl /><prv /><sfl>!!! tip "Build Time"</sfl></tu><tu PI="57" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    Generally a full build takes hours of time depending on the performance of your machine. </sl><tl /><tsl /><prv /><sfl>    Generally a full build takes hours of time depending on the performance of your machine. Recommended configuration is to build on a PC with multicore CPU (&gt;=8 cores), SSD and large memory (&gt;= 8G). And you can read [Build Faster](#build-faster) section below for some tips to speed up the build.</sfl></tu><tu PI="57" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Recommended configuration is to build on a PC with multicore CPU (&gt;=8 cores), SSD and large memory (&gt;= 8G). </sl><tl /><tsl /><prv /><sfl>    Generally a full build takes hours of time depending on the performance of your machine. Recommended configuration is to build on a PC with multicore CPU (&gt;=8 cores), SSD and large memory (&gt;= 8G). And you can read [Build Faster](#build-faster) section below for some tips to speed up the build.</sfl></tu><tu PI="57" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And you can read [Build Faster](#build-faster) section below for some tips to speed up the build.</sl><tl /><tsl /><prv /><sfl>    Generally a full build takes hours of time depending on the performance of your machine. Recommended configuration is to build on a PC with multicore CPU (&gt;=8 cores), SSD and large memory (&gt;= 8G). And you can read [Build Faster](#build-faster) section below for some tips to speed up the build.</sfl></tu><tu PI="58" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To generate Release build, switch the second command to `ninja -C out/Release nwjs`.</sl><tl /><tsl /><prv /><sfl>To generate Release build, switch the second command to `ninja -C out/Release nwjs`.</sfl></tu><tu PI="59" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To build 32-bit/64-bit binaries or non-standard build flavors, you need to setup `GYP_DEFINES` variable in your environment and run `gclient runhooks --force` to generate build files. </sl><tl /><tsl /><prv /><sfl>To build 32-bit/64-bit binaries or non-standard build flavors, you need to setup `GYP_DEFINES` variable in your environment and run `gclient runhooks --force` to generate build files. And then re-run the commands above to generate binaries. Continue to read following sections to find out how to setup `GYP_DEFINES`.</sfl></tu><tu PI="59" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>And then re-run the commands above to generate binaries. </sl><tl /><tsl /><prv /><sfl>To build 32-bit/64-bit binaries or non-standard build flavors, you need to setup `GYP_DEFINES` variable in your environment and run `gclient runhooks --force` to generate build files. And then re-run the commands above to generate binaries. Continue to read following sections to find out how to setup `GYP_DEFINES`.</sfl></tu><tu PI="59" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Continue to read following sections to find out how to setup `GYP_DEFINES`.</sl><tl /><tsl /><prv /><sfl>To build 32-bit/64-bit binaries or non-standard build flavors, you need to setup `GYP_DEFINES` variable in your environment and run `gclient runhooks --force` to generate build files. And then re-run the commands above to generate binaries. Continue to read following sections to find out how to setup `GYP_DEFINES`.</sfl></tu><tu PI="60" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### 32-bit/64-bit Build</sl><tl /><tsl /><prv /><sfl>### 32-bit/64-bit Build</sfl></tu><tu PI="61" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Windows</sl><tl /><tsl /><prv /><sfl>* Windows</sfl></tu><tu PI="62" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - 32-bit: </sl><tl /><tsl /><prv /><sfl>    - 32-bit: is the default build target</sfl></tu><tu PI="62" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>is the default build target</sl><tl /><tsl /><prv /><sfl>    - 32-bit: is the default build target</sfl></tu><tu PI="63" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - 64-bit: </sl><tl /><tsl /><prv /><sfl>    - 64-bit: `set GYP_DEFINES="target_arch=x64"` and rebuild in `out/Debug_x64` or `out/Release_x64` folder</sfl></tu><tu PI="63" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`set GYP_DEFINES="target_arch=x64"` and rebuild in `out/Debug_x64` or `out/Release_x64` folder</sl><tl /><tsl /><prv /><sfl>    - 64-bit: `set GYP_DEFINES="target_arch=x64"` and rebuild in `out/Debug_x64` or `out/Release_x64` folder</sfl></tu><tu PI="64" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Linux</sl><tl /><tsl /><prv /><sfl>* Linux</sfl></tu><tu PI="65" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - 32-bit: </sl><tl /><tsl /><prv /><sfl>    - 32-bit: **TODO: chroot**</sfl></tu><tu PI="65" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>**TODO: </sl><tl /><tsl /><prv /><sfl>    - 32-bit: **TODO: chroot**</sfl></tu><tu PI="65" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>chroot**</sl><tl /><tsl /><prv /><sfl>    - 32-bit: **TODO: chroot**</sfl></tu><tu PI="66" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - 64-bit: </sl><tl /><tsl /><prv /><sfl>    - 64-bit: is the default build target</sfl></tu><tu PI="66" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>is the default build target</sl><tl /><tsl /><prv /><sfl>    - 64-bit: is the default build target</sfl></tu><tu PI="67" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Mac</sl><tl /><tsl /><prv /><sfl>* Mac</sfl></tu><tu PI="68" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - 32-bit: </sl><tl /><tsl /><prv /><sfl>    - 32-bit: `export GYP_DEFINES="host_arch=ia32 target_arch=ia32"` and rebuild in `out/Debug` or `out/Release` folder</sfl></tu><tu PI="68" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`export GYP_DEFINES="host_arch=ia32 target_arch=ia32"` and rebuild in `out/Debug` or `out/Release` folder</sl><tl /><tsl /><prv /><sfl>    - 32-bit: `export GYP_DEFINES="host_arch=ia32 target_arch=ia32"` and rebuild in `out/Debug` or `out/Release` folder</sfl></tu><tu PI="69" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    - 64-bit: </sl><tl /><tsl /><prv /><sfl>    - 64-bit: is the default build target</sfl></tu><tu PI="69" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>is the default build target</sl><tl /><tsl /><prv /><sfl>    - 64-bit: is the default build target</sfl></tu><tu PI="70" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Build Flavors</sl><tl /><tsl /><prv /><sfl>### Build Flavors</sfl></tu><tu PI="71" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* Standard: </sl><tl /><tsl /><prv /><sfl>* Standard: it's generated by default. Same as `GYP_DEFINES="nwjs_sdk=0 disable_nacl=1"`.</sfl></tu><tu PI="71" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>it's generated by default. </sl><tl /><tsl /><prv /><sfl>* Standard: it's generated by default. Same as `GYP_DEFINES="nwjs_sdk=0 disable_nacl=1"`.</sfl></tu><tu PI="71" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Same as `GYP_DEFINES="nwjs_sdk=0 disable_nacl=1"`.</sl><tl /><tsl /><prv /><sfl>* Standard: it's generated by default. Same as `GYP_DEFINES="nwjs_sdk=0 disable_nacl=1"`.</sfl></tu><tu PI="72" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* SDK: </sl><tl /><tsl /><prv /><sfl>* SDK: `GYP_DEFINES="nwjs_sdk=1 disable_nacl=0"`</sfl></tu><tu PI="72" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`GYP_DEFINES="nwjs_sdk=1 disable_nacl=0"`</sl><tl /><tsl /><prv /><sfl>* SDK: `GYP_DEFINES="nwjs_sdk=1 disable_nacl=0"`</sfl></tu><tu PI="73" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* NaCl: </sl><tl /><tsl /><prv /><sfl>* NaCl: `GYP_DEFINES="disable_nacl=0"`</sfl></tu><tu PI="73" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`GYP_DEFINES="disable_nacl=0"`</sl><tl /><tsl /><prv /><sfl>* NaCl: `GYP_DEFINES="disable_nacl=0"`</sfl></tu><tu PI="74" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>See [Build Flavors](../For Users/Advanced/Build Flavors.md) for the differences of all supported build flavors.</sl><tl /><tsl /><prv /><sfl>See [Build Flavors](../For Users/Advanced/Build Flavors.md) for the differences of all supported build flavors.</sfl></tu><tu PI="75" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>### Enable Proprietary Codecs</sl><tl /><tsl /><prv /><sfl>### Enable Proprietary Codecs</sfl></tu><tu PI="76" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Due to the license issue, the prebuilt binaries of NW.js doesn't support proprietary codecs, like H.264. </sl><tl /><tsl /><prv /><sfl>Due to the license issue, the prebuilt binaries of NW.js doesn't support proprietary codecs, like H.264. So you can't play MP3/MP4 with `&lt;audio&gt;` and `&lt;video&gt;` tags with prebuilt NW.js. To enable those medias, you have to build NW.js from source code by following the document of [Enable Proprietary Codecs](Enable Proprietary Codecs.md).</sfl></tu><tu PI="76" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>So you can't play MP3/MP4 with `&lt;audio&gt;` and `&lt;video&gt;` tags with prebuilt NW.js. </sl><tl /><tsl /><prv /><sfl>Due to the license issue, the prebuilt binaries of NW.js doesn't support proprietary codecs, like H.264. So you can't play MP3/MP4 with `&lt;audio&gt;` and `&lt;video&gt;` tags with prebuilt NW.js. To enable those medias, you have to build NW.js from source code by following the document of [Enable Proprietary Codecs](Enable Proprietary Codecs.md).</sfl></tu><tu PI="76" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To enable those medias, you have to build NW.js from source code by following the document of [Enable Proprietary Codecs](Enable Proprietary Codecs.md).</sl><tl /><tsl /><prv /><sfl>Due to the license issue, the prebuilt binaries of NW.js doesn't support proprietary codecs, like H.264. So you can't play MP3/MP4 with `&lt;audio&gt;` and `&lt;video&gt;` tags with prebuilt NW.js. To enable those medias, you have to build NW.js from source code by following the document of [Enable Proprietary Codecs](Enable Proprietary Codecs.md).</sfl></tu><tu PI="77" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Build Faster</sl><tl /><tsl /><prv /><sfl>## Build Faster</sfl></tu><tu PI="78" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>From Google's website, there are a few tips to speed up your build. </sl><tl /><tsl /><prv /><sfl>From Google's website, there are a few tips to speed up your build. Open the links below to see the tips for your platform:</sfl></tu><tu PI="78" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Open the links below to see the tips for your platform:</sl><tl /><tsl /><prv /><sfl>From Google's website, there are a few tips to speed up your build. Open the links below to see the tips for your platform:</sfl></tu><tu PI="79" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* [Mac Build Instructions: </sl><tl /><tsl /><prv /><sfl>* [Mac Build Instructions: Faster builds](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md#Faster-builds)</sfl></tu><tu PI="79" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Faster builds](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md#Faster-builds)</sl><tl /><tsl /><prv /><sfl>* [Mac Build Instructions: Faster builds](https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md#Faster-builds)</sfl></tu><tu PI="80" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>* [Tips for improving build speed on Linux](https://chromium.googlesource.com/chromium/src/+/master/docs/linux_faster_builds.md)</sl><tl /><tsl /><prv /><sfl>* [Tips for improving build speed on Linux](https://chromium.googlesource.com/chromium/src/+/master/docs/linux_faster_builds.md)</sfl></tu></body></Transmate>