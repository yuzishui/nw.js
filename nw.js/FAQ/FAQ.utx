<Transmate Version="1.0.0.0"><head utxVersion="1.0u" Tag="0" CreationTime="2016/3/9 20:42:15" FileIndex="0" SourceLanguage="英语" TargetLanguage="中文简体" SourceDocumentPath="D:\workspace_github\nw.js\nw.js\FAQ\FAQ.txt" RowIndex="0" HideOrNot="False" TermFileType="" TermFileId="" TheOriginalWord="290" TheNumberWords="0" ToTranslate="0" FileType="0" MemFileOutType="" MemFileOutId="" MemFileInType="" MemFileInId="" LitePath="D:\workspace_github\nw.js\nw.js\FileInformation.ueprj" CustomTermPath="" PreviewPath="D:\workspace_github\nw.js\nw.js\FAQ\FAQPreview.html"><links /></head><body><tu PI="1" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl># FAQ {: </sl><tl /><tsl /><prv /><sfl># FAQ {: .doctitle}</sfl></tu><tu PI="1" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>.doctitle}</sl><tl /><tsl /><prv /><sfl># FAQ {: .doctitle}</sfl></tu><tu PI="2" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>---</sl><tl /><tsl /><prv /><sfl>---</sfl></tu><tu PI="3" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>[TOC]</sl><tl /><tsl /><prv /><sfl>[TOC]</sfl></tu><tu PI="4" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## console.log doesn't output to Linux terminal</sl><tl /><tsl /><prv /><sfl>## console.log doesn't output to Linux terminal</sfl></tu><tu PI="5" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>`--enable-logging=stderr` should be used in the command line</sl><tl /><tsl /><prv /><sfl>`--enable-logging=stderr` should be used in the command line</sfl></tu><tu PI="6" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## `var crypto = require('crypto')` gets a wrong object</sl><tl /><tsl /><prv /><sfl>## `var crypto = require('crypto')` gets a wrong object</sfl></tu><tu PI="7" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Chromium has its聽own global `crypto` object which can't be overwritten. </sl><tl /><tsl /><prv /><sfl>Chromium has its聽own global `crypto` object which can't be overwritten. So you can't use the same variable name `crypto`. Changing your variable name to something else, like `nodeCrypto`, will work.</sfl></tu><tu PI="7" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>So you can't use the same variable name `crypto`. </sl><tl /><tsl /><prv /><sfl>Chromium has its聽own global `crypto` object which can't be overwritten. So you can't use the same variable name `crypto`. Changing your variable name to something else, like `nodeCrypto`, will work.</sfl></tu><tu PI="7" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Changing your variable name to something else, like `nodeCrypto`, will work.</sl><tl /><tsl /><prv /><sfl>Chromium has its聽own global `crypto` object which can't be overwritten. So you can't use the same variable name `crypto`. Changing your variable name to something else, like `nodeCrypto`, will work.</sfl></tu><tu PI="8" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Images are broken in AnugarJS and receive `Failed to load resource XXX net::ERR_UNKNOWN_URL_SCHEME` in DevTools</sl><tl /><tsl /><prv /><sfl>## Images are broken in AnugarJS and receive `Failed to load resource XXX net::ERR_UNKNOWN_URL_SCHEME` in DevTools</sfl></tu><tu PI="9" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>AngularJS added `unsafe:` prefix for unknown scheme to prevent XSS attack. </sl><tl /><tsl /><prv /><sfl>AngularJS added `unsafe:` prefix for unknown scheme to prevent XSS attack. URLs in NW.js and Chrome apps are started with `chrome-extension:` scheme, which is unknown to AnuglarJS. The solution is to config the whitelist of known schemes with AngularJS by adding following lines:</sfl></tu><tu PI="9" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>URLs in NW.js and Chrome apps are started with `chrome-extension:` scheme, which is unknown to AnuglarJS. </sl><tl /><tsl /><prv /><sfl>AngularJS added `unsafe:` prefix for unknown scheme to prevent XSS attack. URLs in NW.js and Chrome apps are started with `chrome-extension:` scheme, which is unknown to AnuglarJS. The solution is to config the whitelist of known schemes with AngularJS by adding following lines:</sfl></tu><tu PI="9" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The solution is to config the whitelist of known schemes with AngularJS by adding following lines:</sl><tl /><tsl /><prv /><sfl>AngularJS added `unsafe:` prefix for unknown scheme to prevent XSS attack. URLs in NW.js and Chrome apps are started with `chrome-extension:` scheme, which is unknown to AnuglarJS. The solution is to config the whitelist of known schemes with AngularJS by adding following lines:</sfl></tu><tu PI="10" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="11" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>myApp.config(['$compileProvider',</sl><tl /><tsl /><prv /><sfl>myApp.config(['$compileProvider',</sfl></tu><tu PI="12" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  function($compileProvider) {</sl><tl /><tsl /><prv /><sfl>  function($compileProvider) {</sfl></tu><tu PI="13" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    $compileProvider.imgSrcSanitizationWhitelist(/^\s*((https?|ftp|file|blob|chrome-extension):|data:image\/)/);</sl><tl /><tsl /><prv /><sfl>    $compileProvider.imgSrcSanitizationWhitelist(/^\s*((https?|ftp|file|blob|chrome-extension):|data:image\/)/);</sfl></tu><tu PI="14" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|file:chrome-extension):/);</sl><tl /><tsl /><prv /><sfl>    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|file:chrome-extension):/);</sfl></tu><tu PI="15" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  }]);</sl><tl /><tsl /><prv /><sfl>  }]);</sfl></tu><tu PI="16" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="17" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## Can't see exception reporting in AngularJS 2</sl><tl /><tsl /><prv /><sfl>## Can't see exception reporting in AngularJS 2</sfl></tu><tu PI="18" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>AngularJS 2 tries to register exception handlers in global variable `global`. </sl><tl /><tsl /><prv /><sfl>AngularJS 2 tries to register exception handlers in global variable `global`. However it's already existed in NW.js environment, which prevents exception reporting shown in DevTools. The workaround is to rename `global` to something else before loading any AngularJS libraries. For example,</sfl></tu><tu PI="18" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>However it's already existed in NW.js environment, which prevents exception reporting shown in DevTools. </sl><tl /><tsl /><prv /><sfl>AngularJS 2 tries to register exception handlers in global variable `global`. However it's already existed in NW.js environment, which prevents exception reporting shown in DevTools. The workaround is to rename `global` to something else before loading any AngularJS libraries. For example,</sfl></tu><tu PI="18" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>The workaround is to rename `global` to something else before loading any AngularJS libraries. </sl><tl /><tsl /><prv /><sfl>AngularJS 2 tries to register exception handlers in global variable `global`. However it's already existed in NW.js environment, which prevents exception reporting shown in DevTools. The workaround is to rename `global` to something else before loading any AngularJS libraries. For example,</sfl></tu><tu PI="18" MatchPercent="" Bindex="4" IsVisible="False" TranStatus="" StateTranslation="False"><sl>For example,</sl><tl /><tsl /><prv /><sfl>AngularJS 2 tries to register exception handlers in global variable `global`. However it's already existed in NW.js environment, which prevents exception reporting shown in DevTools. The workaround is to rename `global` to something else before loading any AngularJS libraries. For example,</sfl></tu><tu PI="19" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```html</sl><tl /><tsl /><prv /><sfl>```html</sfl></tu><tu PI="20" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;script&gt;</sfl></tu><tu PI="21" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>window.nw_global = window.global;</sl><tl /><tsl /><prv /><sfl>window.nw_global = window.global;</sfl></tu><tu PI="22" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>window.global = undefined;</sl><tl /><tsl /><prv /><sfl>window.global = undefined;</sfl></tu><tu PI="23" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;/script&gt;</sl><tl /><tsl /><prv /><sfl>&lt;/script&gt;</sfl></tu><tu PI="24" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>&lt;!-- Angular 2 Dependencies --&gt;</sl><tl /><tsl /><prv /><sfl>&lt;!-- Angular 2 Dependencies --&gt;</sfl></tu><tu PI="25" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu><tu PI="26" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>## How to leave fullscreen mode with ESC key?</sl><tl /><tsl /><prv /><sfl>## How to leave fullscreen mode with ESC key?</sfl></tu><tu PI="27" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>Usually users expect to use ESC key to quit fullscreen mode. </sl><tl /><tsl /><prv /><sfl>Usually users expect to use ESC key to quit fullscreen mode. By default, NW.js don't bind ESC shortcut for leaving fullscreen mode, but providing APIs for entering and leaving fullscreen mode. It will give developers more control on fullscreen mode.</sfl></tu><tu PI="27" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>By default, NW.js don't bind ESC shortcut for leaving fullscreen mode, but providing APIs for entering and leaving fullscreen mode. </sl><tl /><tsl /><prv /><sfl>Usually users expect to use ESC key to quit fullscreen mode. By default, NW.js don't bind ESC shortcut for leaving fullscreen mode, but providing APIs for entering and leaving fullscreen mode. It will give developers more control on fullscreen mode.</sfl></tu><tu PI="27" MatchPercent="" Bindex="3" IsVisible="False" TranStatus="" StateTranslation="False"><sl>It will give developers more control on fullscreen mode.</sl><tl /><tsl /><prv /><sfl>Usually users expect to use ESC key to quit fullscreen mode. By default, NW.js don't bind ESC shortcut for leaving fullscreen mode, but providing APIs for entering and leaving fullscreen mode. It will give developers more control on fullscreen mode.</sfl></tu><tu PI="28" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>To enable ESC key for leaving fullscreen mode, you can use [Shortcut API](../References/Shortcut.md):</sl><tl /><tsl /><prv /><sfl>To enable ESC key for leaving fullscreen mode, you can use [Shortcut API](../References/Shortcut.md):</sfl></tu><tu PI="29" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```javascript</sl><tl /><tsl /><prv /><sfl>```javascript</sfl></tu><tu PI="30" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>nw.App.registerGlobalHotKey(new nw.Shortcut({</sl><tl /><tsl /><prv /><sfl>nw.App.registerGlobalHotKey(new nw.Shortcut({</sfl></tu><tu PI="31" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  key: </sl><tl /><tsl /><prv /><sfl>  key: "Esc",</sfl></tu><tu PI="31" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>"Esc",</sl><tl /><tsl /><prv /><sfl>  key: "Esc",</sfl></tu><tu PI="32" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  active: </sl><tl /><tsl /><prv /><sfl>  active: function () {</sfl></tu><tu PI="32" MatchPercent="" Bindex="2" IsVisible="False" TranStatus="" StateTranslation="False"><sl>function () {</sl><tl /><tsl /><prv /><sfl>  active: function () {</sfl></tu><tu PI="33" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    // decide whether to leave fullscreen mode</sl><tl /><tsl /><prv /><sfl>    // decide whether to leave fullscreen mode</sfl></tu><tu PI="34" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    // then ...</sl><tl /><tsl /><prv /><sfl>    // then ...</sfl></tu><tu PI="35" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>    nw.Window.get().leaveFullscreen();</sl><tl /><tsl /><prv /><sfl>    nw.Window.get().leaveFullscreen();</sfl></tu><tu PI="36" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>  })</sl><tl /><tsl /><prv /><sfl>  })</sfl></tu><tu PI="37" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>}));</sl><tl /><tsl /><prv /><sfl>}));</sfl></tu><tu PI="38" MatchPercent="" Bindex="1" IsVisible="False" TranStatus="" StateTranslation="False"><sl>```</sl><tl /><tsl /><prv /><sfl>```</sfl></tu></body></Transmate>